######
##
## A *realistic* implementation of a simply typed functional programming language
## (STFPL) is given here.
##
######

###### beg of [README.txt] ######

######

Usage: ./stfpl < [input file]

For instance, the following examples are available:

  ./stfpl < TEST/ackermann.stfpl
  ./stfpl < TEST/fact.stfpl
  ./stfpl < TEST/fact_fix.stfpl
  ./stfpl < TEST/fib.stfpl
  ./stfpl < TEST/queens.stfpl

######

README.txt

This file itself.

######

Makefile

To build the system, please issue the command 'make stfpl'

######

error.dats
error.sats

For error processing

######

symbol.dats
symbol.sats

For building a symbol table for STFPL.

######

absyn.dats
absyn.sats

For abstract syntax trees (to be generated by the parser)

######

fixity.dats
fixity.sats

For handling fixity issues (infix, prefix, postfix)

######

parser.dats
parser.sats

A parser for STFPL implemented via parsing combinators. The generated
abstract syntax trees are associated with location information that is
used for reporting type error message.

######

interp0.dats
interp0.sats

Interpreter for STFPL (using AST at level 0)

######

trans1.dats
trans1.sats

Typechecker for STFPL.

######

interp1.dats
interp1.sats

Interpreter for STFPL (using AST at level 1)

######

stfpl_main.dats

The 'main' function is implemented here. 

######

TEST/

This directory contains a variety of code examples written in STFPL.

######

###### end of [README.txt] ######
