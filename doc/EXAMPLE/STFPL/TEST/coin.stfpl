/*
** Translated from ATS to STFPL
*/

let
  val theCoins = (1, 5, 10, 25): (int, int, int, int)

  val rec coin_get: int -> int = lam(n: int) =>
    if n = 0 then theCoins.0
    else if n = 1 then theCoins.1
    else if n = 2 then theCoins.2
    else if n = 3 then theCoins.3
    else ~1 /* erroneous value */
  // end of [coin_get]
  
  val rec aux: (int, int) -> int = lam(sum: int, n: int) =>
    if sum > 0 then
       (if n >= 0 then aux (sum, n-1) + aux (sum-coin_get(n), n) else 0)
      else (if sum < 0 then 0 else 1)
    // end of [aux]
  val coin_change: int -> int =  lam(sum: int) => 
    aux (sum, 3)
in
  coin_change(100)
end /* end of [let] */
