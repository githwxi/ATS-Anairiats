%{
//
#include "tutorial.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from datatypes.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
#comment("beg of [function-or-closure.html]")

<H2><A id="function-or-closure" name="function-or-closure">Function or
Closure?</A></H2>

<HR SIZE=1 ALIGN=LEFT><P>

It is possible in ATS to differentiate at the level of types functions
without environment from functions with environment.  This is an
indispensable feature for interfacing functions in C <EM>directly</EM>
inside ATS as these functions all have no environment. A function with an
environment is often referred to as a closure.

<H4>A problem with closures</H4>

In the programming language C, each function is at the toplevel, and it is
naturally represented as a pointer to the code heap where the code for the
function is stored. However, inner functions are supported in ATS, and they
may appear in the return value of a function call. As an example, the
following code in ATS involves an inner function <i>add_x</i> appearing in
the return value of an outer function <i>add</i>:

#atscode2xmld("\
fn add (x: int):<cloref> int -<cloref> int = begin
  let fn add_x (y: int):<cloref> int = x + y in add_x end
end // end of [add]
")

The syntax <i>&lt;cloref&gt;</i> indicates that the defined functions
<i>add</i> and <i>add_x</i> are both (persistant) closure references.
Applying <i>add</i> to a given integer <i>i</i>, we obtain a unary function
that adds <i>i</i> to its argument. This function is represented as a pair
<i>(add_x_env, [x -> i])</i>, where we use <i>[x-&gt;i]</i> for something
often referred to as an environment that binds <i>x</i> to <i>i</i>, and
<i>add_x_env</i> for the (toplevel) function defined in the following
(pseudo) code:

#atscode2xmld("\
fun add_x_env (env, y) = env.x + y
")

Note that the (pseudo) syntax <i>env.x</i> stands for the selection of the
value to which <i>x</i> is bound in the environment <i>env</i>.
<P>

We use the name <i>closure</i> to refer to a pair like <i>(add_x_env, [x ->
i])</i>. Given that functions may occur as arguments (of other functions)
in ATS, it is necessary that all functions be represented uniformly as
closures (if functions without environments cannot be differentiated from
functions with environments at compile-time). For instance, the
previously defined (toplevel) function <i>add</i> needs to be represented
as a pair <i>(add_env, [])</i>, where <i>[]</i> stands for the empty
environment and <i>add_env</i> is the function defined in the following
(pseudo) code:

<pre>
fun add_env (env, x) = (add_x_env, [x -> x])
</pre>

In functional languages like ML and Haskell, all functions are represented
as closures. Unfortunately, this requirement for representing all functions
as closures, can cause a serious difficulty when we try to use in ATS a
higher-order function implemented in C. Let us see a concrete example.
<P>

The function <i>qsort</i> is declared in &lt;stdlib.h&gt; with the following
type:

<pre>
void qsort(void *base, size_t nmemb, size_t size, int(*compar)(const void *, const void *));
</pre>

Clearly, <i>qsort</i> demands that its fourth argument be a function (not a
closure). In order to use <i>qsort</i> in ATS directly, we need a way to
construct functions represented as code pointers (instead of closures).
<P>

<h4>Types for functions with environment</h4>

In ATS, a type of the form <i>(T_1, ..., T_n) -&lt;cloref&gt; T_0</i> is
for a closure reference, that is, a reference to a function paired with an
environment that takes <i>n</i> arguments of types <i>T_1, ..., T_n</i> and
returns a value of type <i>T_0</i>.  The following
declaration states that <i>foo</i> is a closure reference of the type
<i>(T_1, ..., T_n) -&lt;cloref&gt; T_0</i>:

<pre>
val foo : (T_1, ...., T_n) -&lt;cloref&gt; T_0
</pre>

<h4>Types for functions without environment</h4>

In ATS, a type of the form <i>(T_1, ..., T_n) -&lt;fun&gt; T_0</i>,
where <i>fun</i> can be omitted, is for a
function without environment that takes <i>n</i> arguments of types <i>T_1,
..., T_n</i> and returns a value of type <i>T_0</i>. The
following two equivalent declarations both state that <i>bar</i> is a
function of the type <i>(T_1, ..., T_n) -&lt;fun&gt; T_0</i>:

<pre>
val bar : (T_1, ...., T_n) -&lt;fun&gt; T_0
fun bar (x_1: T_1, ...., x_n: T_n): T_0
</pre>

The previously mentioned function <i>qsort</i> can be given the following
type in ATS:

#atscode2xmls("\
fun qsort {a:viewt@ype} {n:nat}
  (base: & @[a][n], nmemb: size_t n, size: sizeof_t a, compar: (&a, &a) -<fun> int): void
")

This type indicates that <i>qsort</i> itself is a function without
environment and its fourth argument is also a function without environment.
As an example, the following code implements a simple test on <i>qsort</i>:

%{
(*
<PRE><FONT COLOR="#E80000">
<FONT COLOR="#000000">fn</FONT> test_qsort <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=</FONT> <FONT COLOR="#000000">let</FONT>
  <FONT COLOR="#000000">fun</FONT> pr_loop <FONT COLOR="#0000FF"><FONT COLOR="#000000">{</FONT>n<FONT COLOR="#000000">,</FONT>i<FONT COLOR="#000000">:</FONT>nat <FONT COLOR="#000000">|</FONT> i &lt;= n<FONT COLOR="#000000">}</FONT></FONT> <FONT COLOR="#0000FF"><FONT COLOR="#000000">.&lt;</FONT>n-i<FONT COLOR="#000000">&gt;.</FONT></FONT>
    <FONT COLOR="#000000">(</FONT>A<FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF"><FONT COLOR="#000000">&amp;</FONT><FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">@[</FONT>int<FONT COLOR="#000000">]</FONT><FONT COLOR="#000000">[</FONT>n<FONT COLOR="#000000">]</FONT><FONT COLOR="#000000">)</FONT></FONT><FONT COLOR="#000000">,</FONT> n<FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF">size_t n</FONT><FONT COLOR="#000000">,</FONT> i<FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF">size_t i</FONT><FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF">void</FONT> <FONT COLOR="#000000">=</FONT>
    <FONT COLOR="#000000">if</FONT> i <FONT COLOR="#000000">&lt;</FONT> n <FONT COLOR="#000000">then</FONT> <FONT COLOR="#000000">begin</FONT>
      <FONT COLOR="#000000">if</FONT> i <FONT COLOR="#000000">&gt;</FONT> 0 <FONT COLOR="#000000">then</FONT> print ", "<FONT COLOR="#000000">;</FONT> print A<FONT COLOR="#000000">.</FONT><FONT COLOR="#000000">[</FONT><FONT COLOR="#009000">i</FONT><FONT COLOR="#000000">]</FONT><FONT COLOR="#000000">;</FONT> pr_loop <FONT COLOR="#000000">(</FONT>A<FONT COLOR="#000000">,</FONT> n<FONT COLOR="#000000">,</FONT> i+1<FONT COLOR="#000000">)</FONT>
    <FONT COLOR="#000000">end</FONT> <FONT COLOR="#787878">// end of [if]
</FONT>  <FONT COLOR="#787878">// end of [pr_loop]
</FONT>
  <FONT COLOR="#787878">// creating a linear array of size 10
</FONT>  <FONT COLOR="#000000">val</FONT> <FONT COLOR="#000000">(</FONT><FONT COLOR="#009000">pf_gc</FONT><FONT COLOR="#000000">,</FONT> <FONT COLOR="#009000">pf_arr</FONT> <FONT COLOR="#000000">|</FONT> p_arr<FONT COLOR="#000000">,</FONT> asz<FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=</FONT> <FONT COLOR="#000000">$arrsz</FONT> <FONT COLOR="#000000">{</FONT>int<FONT COLOR="#000000">}</FONT> <FONT COLOR="#000000">(</FONT>1<FONT COLOR="#000000">,</FONT> 9<FONT COLOR="#000000">,</FONT> 2<FONT COLOR="#000000">,</FONT> 8<FONT COLOR="#000000">,</FONT> 3<FONT COLOR="#000000">,</FONT> 7<FONT COLOR="#000000">,</FONT> 4<FONT COLOR="#000000">,</FONT> 6<FONT COLOR="#000000">,</FONT> 5<FONT COLOR="#000000">,</FONT> 0<FONT COLOR="#000000">)</FONT>

  <FONT COLOR="#000000">val</FONT> <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=</FONT> <FONT COLOR="#000000">(</FONT>print "before quicksort:\n"<FONT COLOR="#000000">)</FONT>
  <FONT COLOR="#000000">val</FONT> <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=</FONT> pr_loop <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">!</FONT>p_arr<FONT COLOR="#000000">,</FONT> asz<FONT COLOR="#000000">,</FONT> 0<FONT COLOR="#000000">)</FONT>
  <FONT COLOR="#000000">val</FONT> <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=</FONT> print_newline <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT>

  <FONT COLOR="#000000">val</FONT> <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=</FONT> <FONT COLOR="#000000">begin</FONT>
    qsort <FONT COLOR="#0000FF"><FONT COLOR="#000000">{</FONT>int<FONT COLOR="#000000">}</FONT></FONT> <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">!</FONT>p_arr<FONT COLOR="#000000">,</FONT> asz<FONT COLOR="#000000">,</FONT> sizeof&lt;<FONT COLOR="#0000FF">int</FONT><FONT COLOR="#000000">&gt;</FONT><FONT COLOR="#000000">,</FONT> <FONT COLOR="#000000">lam</FONT> <FONT COLOR="#000000">(</FONT>x<FONT COLOR="#000000">,</FONT> y<FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=&gt;</FONT> compare <FONT COLOR="#000000">(</FONT>x<FONT COLOR="#000000">,</FONT> y<FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">)</FONT>
  <FONT COLOR="#000000">end</FONT> <FONT COLOR="#787878">// end of [val]
</FONT>
  <FONT COLOR="#000000">val</FONT> <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=</FONT> <FONT COLOR="#000000">(</FONT>print "after quicksort:\n"<FONT COLOR="#000000">)</FONT>
  <FONT COLOR="#000000">val</FONT> <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=</FONT> pr_loop <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">!</FONT>p_arr<FONT COLOR="#000000">,</FONT> asz<FONT COLOR="#000000">,</FONT> 0<FONT COLOR="#000000">)</FONT>
  <FONT COLOR="#000000">val</FONT> <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=</FONT> print_newline <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT>
<FONT COLOR="#000000">in</FONT>
  array_ptr_free <FONT COLOR="#0000FF"><FONT COLOR="#000000">{</FONT>int<FONT COLOR="#000000">}</FONT></FONT> <FONT COLOR="#000000">(</FONT><FONT COLOR="#009000">pf_gc</FONT><FONT COLOR="#000000">,</FONT> <FONT COLOR="#009000">pf_arr</FONT> <FONT COLOR="#000000">|</FONT> p_arr<FONT COLOR="#000000">)</FONT>
<FONT COLOR="#000000">end</FONT> <FONT COLOR="#787878">// end of [test_qsort]
</FONT>
</FONT></PRE>
*)
%}
#atscode2xmld('\
fn test_qsort () = let
  fun pr_loop {n,i:nat | i <= n} .<n-i>.
    (A: &(@[int][n]), n: size_t n, i: size_t i): void =
    if i < n then begin
      if i > 0 then print ", "; print A.[i]; pr_loop (A, n, i+1)
    end // end of [if]
  // end of [pr_loop]

  // creating a linear array of size 10
  val (pf_gc, pf_arr | p_arr, asz) = $arrsz {int} (1, 9, 2, 8, 3, 7, 4, 6, 5, 0)

  val () = (print "before quicksort:\\\n")
  val () = pr_loop (!p_arr, asz, 0)
  val () = print_newline ()

  val () = begin
    qsort {int} (!p_arr, asz, sizeof<int>, lam (x, y) => compare (x, y))
  end // end of [val]

  val () = (print "after quicksort:\n")
  val () = pr_loop (!p_arr, asz, 0)
  val () = print_newline ()
in
  array_ptr_free {int} (pf_gc, pf_arr | p_arr)
end // end of [test_qsort]
')

<H4>Implementing a function without enviroment</H4>

The following code implements <i>add</i> as a function without enviroment:

#atscode2xmld("\
fn add0 (x: int):<fun> int -<cloref> int = begin
  let fn add0_x (y: int):<cloref> int = x + y in add0_x end
end // end of [add0]
")

The syntax <i>:&lt;fun&gt</i> is an annotation indicating that the type
ascribed to <i>add0</i> is <i>int -&lt;fun&gt; (int -&lt;cloref&gt; int)</i>.  If we
change <i>int -&lt;cloref&gt; int</i> into
<i>int -&lt;fun&gt; int</i>, then an error is reported at compile-time as
the function <i>add0_x</i> does require a nonempty environment that binds
the variable <i>x</i> to some value. If <i>add0</i> is needed in a place
where a closure is expected, we can simply write
<i>lam x => add0 (x)</i> instead.
<P>
When a function is declared via the keyword <i>fun</i> or <i>fn</i>, it is
assumed by default that the function is without environment. For instance,
the following code is equivalent to the previous implementation of
<i>add0</i>:

#atscode2xmld("\
fn add0 (x: int): int -<cloref> int = begin
  let fn add0_x (y: int):<cloref> int = x + y in add0_x end
end // end of [add0]
")

In contrast, the following code, which is used at the beginning of this
tutorial, implements <i>add</i> as a closure:

#atscode2xmld("\
fn add (x: int):<cloref> int -<cloref> int = begin
  let fn add_x (y: int):<cloref> int = x + y in add_x end
end // end of [add]
")

<H4>Linear Closures</H4>

As a closure is an aggregated value, memory allocation is required in order
to form closures. In ATS, linear closures are supported. As memory
allocated for linear closures can be freed explicitly by the programmer,
such closures are particularly useful in a situation where automatic
garbage collection is not allowed or its use needs to be significantly
reduced. We are to present detailed explanation on linear closures elsewhere.
<P>

<HR SIZE=1 ALIGN=LEFT><P>

The code used for illustration is available <a
href="function-or-closure.dats">here</a>.

#comment("end of [function-or-closure.html]")

%{
implement main () = fprint_filsub (stdout_ref, "function-or-closure_atxt.txt")
%}
