%{
//
#include "tutorial.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from datatypes.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
#comment("beg of [datatypes.html]")

<H2><A id="datatypes" name="datatypes">Datatypes</A></H2>

<HR SIZE=1 ALIGN=LEFT><P>

The feature of datatypes in ATS is directly adopted from ML. In addition to
what is available in ML, we can also form in ATS dependent datatypes and
guarded recursive datatypes (GRDTs), also known as generalized algebraic
datatypes (GADTs). There is also a form of linear datatypes (dataviewtypes)
available in ATS, which is to be explained elsewhere.

<H4>A Simple Datatype</H4>
In the first example given below, a datatype type <i>intlst0</i>
is declared to represent lists of integers and a function
<i>length_intlst0</i> for computing the length of a given
list is implemented:

%{
(*
<PRE><FONT COLOR="#E80000"><FONT COLOR="#000000">datatype</FONT> <FONT COLOR="#0000FF">intlst0</FONT> <FONT COLOR="#000000">=</FONT> <FONT COLOR="#787878">// simple datatype
</FONT>  <FONT COLOR="#000000">|</FONT> INTLST0nil <FONT COLOR="#787878">// the first bar (|) is optional
</FONT>  <FONT COLOR="#000000">|</FONT> INTLST0cons <FONT COLOR="#000000">of</FONT> <FONT COLOR="#0000FF"><FONT COLOR="#000000">(</FONT>int<FONT COLOR="#000000">,</FONT> intlst0<FONT COLOR="#000000">)</FONT></FONT>

<FONT COLOR="#000000">fun</FONT> length_intlst0 <FONT COLOR="#000000">(</FONT>xs<FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF">intlst0</FONT><FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF">int</FONT> <FONT COLOR="#000000">=</FONT>
  <FONT COLOR="#000000">case+</FONT> xs <FONT COLOR="#000000">of</FONT> <FONT COLOR="#787878">// [case+] demands exhaustive pattern matching
</FONT>  <FONT COLOR="#787878">// the bar (|) in the first clause is optional
</FONT>  <FONT COLOR="#000000">|</FONT> INTLST0cons <FONT COLOR="#000000">(</FONT>_<FONT COLOR="#000000">,</FONT> xs<FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=&gt;</FONT> 1 + length_intlst0 <FONT COLOR="#000000">(</FONT>xs<FONT COLOR="#000000">)</FONT>
  <FONT COLOR="#000000">|</FONT> INTLST0nil <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=&gt;</FONT> 0
</FONT></PRE>
*)
%}
#atscode2xmld("\
datatype intlst0 = // simple datatype
  | INTLST0nil // the first bar (|) is optional
  | INTLST0cons of (int, intlst0)

fun length_intlst0 (xs: intlst0): int =
  case+ xs of // [case+] demands exhaustive pattern matching
  // the bar (|) in the first clause is optional
  | INTLST0cons (_, xs) => 1 + length_intlst0 (xs)
  | INTLST0nil () => 0
// end of [length_intlst0]
")#comment("atscode2xmld")

Please note that any valid identifiers for variables can also be used as
identifiers for constructors. The pattern for a constructor <i>C</i> with
no arguments is <i>C( )</i>. If we write <i>C</i> instead of <i>C( )</i>,
then <i>C</i> is assumed to be a variable pattern, which matches any value.
<P>

<H4>A Dependent Datatype</H4>
In ATS, we can form a dependent datatype <i>intlst1</i> as follows to
represent integer lists:

%{
(*
<PRE><FONT COLOR="#E80000"><FONT COLOR="#000000">datatype</FONT> <FONT COLOR="#0000FF">intlst1 <FONT COLOR="#000000">(</FONT>int<FONT COLOR="#000000">)</FONT></FONT> <FONT COLOR="#000000">=</FONT> <FONT COLOR="#787878">// dependent datatype
</FONT>  <FONT COLOR="#000000">|</FONT> INTLST1nil <FONT COLOR="#0000FF"><FONT COLOR="#000000">(</FONT>0<FONT COLOR="#000000">)</FONT></FONT> <FONT COLOR="#787878">// the first bar (|) is optional
</FONT>  <FONT COLOR="#000000">|</FONT> <FONT COLOR="#000000">{</FONT><FONT COLOR="#0000FF">n<FONT COLOR="#000000">:</FONT>nat</FONT><FONT COLOR="#000000">}</FONT> INTLST1cons <FONT COLOR="#0000FF"><FONT COLOR="#000000">(</FONT>n+1<FONT COLOR="#000000">)</FONT></FONT> <FONT COLOR="#000000">of</FONT> <FONT COLOR="#0000FF"><FONT COLOR="#000000">(</FONT>int<FONT COLOR="#000000">,</FONT> intlst1 n<FONT COLOR="#000000">)</FONT></FONT>
</FONT></PRE>
*)
%}
#atscode2xmld("\
datatype intlst1 (int) = // dependent datatype
  | INTLST1nil (0) // the first bar (|) is optional
  | {n:nat} INTLST1cons (n+1) of (int, intlst1 n)
// end of [intlst1]
")

We may see <i>intlst1</i> as a refinement of <i>intlst0</i>.  Given an
integer <i>n</i>, <i>intlst1(n)</i> is a type for integer lists of length
<i>n</i>. The syntax for declaring <i>intlst1</i> introduces
two constructors of the following types:

<pre>
INTLST1nil : intlst1 0
INTLST1cons : {n:nat} (int, intlst1 n) -> intlst (n+1)
</pre>

So <i>INTLST1nil</i> is a list of length <i>0</i> and
<i>INTLST1cons</i> constructs a list of length <i>n+1</i>
if given an integer and an integer list of length <i>n</i>.
<P>

The function for computing the length of a given integer list can now
be implemented as follows:

%{
(*
<PRE><FONT COLOR="#E80000"><FONT COLOR="#000000">fun</FONT> length_intlst1 <FONT COLOR="#0000FF"><FONT COLOR="#000000">{</FONT>n<FONT COLOR="#000000">:</FONT>nat<FONT COLOR="#000000">}</FONT></FONT> <FONT COLOR="#000000">(</FONT>xs<FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF">intlst1 n</FONT><FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF">int n</FONT> <FONT COLOR="#000000">=</FONT>
  <FONT COLOR="#000000">case+</FONT> xs <FONT COLOR="#000000">of</FONT> <FONT COLOR="#787878">// the bar (|) in the first clause is optional
</FONT>  <FONT COLOR="#787878">// the bar (|) in the first clause is optional
</FONT>  <FONT COLOR="#000000">|</FONT> INTLST1cons <FONT COLOR="#000000">(</FONT>_<FONT COLOR="#000000">,</FONT> xs<FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=&gt;</FONT> 1 + length_intlst1 <FONT COLOR="#000000">(</FONT>xs<FONT COLOR="#000000">)</FONT>
  <FONT COLOR="#000000">|</FONT> INTLST1nil <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=&gt;</FONT> 0
</FONT></PRE>
*)
%}
#atscode2xmld("\
fun length_intlst1 {n:nat} (xs: intlst1 n): int n =
  case+ xs of // the bar (|) in the first clause is optional
  // the bar (|) in the first clause is optional
  | INTLST1cons (_, xs) => 1 + length_intlst1 (xs)
  | INTLST1nil () => 0
// end of [length_intlst1]
")

Note that <i>length_intlst1</i> is assigned the following type:

<pre>
{n:nat} intlst1 n -> int n
</pre>

which clearly indicates that the returned value of a call to
<i>length_intlst1</i> is the length of the argument of the call.
<P>

As another example, the following code implements the list subscripting
function:

%{
(*
<PRE><FONT COLOR="#E80000"><FONT COLOR="#787878">// the index is a natural number less than the size of the indexed length
</FONT><FONT COLOR="#000000">fun</FONT> nth_intlst1 <FONT COLOR="#0000FF"><FONT COLOR="#000000">{</FONT>n<FONT COLOR="#000000">,</FONT>i<FONT COLOR="#000000">:</FONT>int <FONT COLOR="#000000">|</FONT> 0 &lt;= i<FONT COLOR="#000000">;</FONT> i <FONT COLOR="#000000">&lt;</FONT> n<FONT COLOR="#000000">}</FONT></FONT> <FONT COLOR="#000000">(</FONT>xs<FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF">intlst1 n</FONT><FONT COLOR="#000000">,</FONT> i<FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF">int i</FONT><FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF">int</FONT> <FONT COLOR="#000000">=</FONT>
  <FONT COLOR="#787878">// [val+] demands exhaustive pattern matching
</FONT>  <FONT COLOR="#000000">let</FONT> <FONT COLOR="#000000">val+</FONT> INTLST1cons <FONT COLOR="#000000">(</FONT>x<FONT COLOR="#000000">,</FONT> xs<FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=</FONT> xs <FONT COLOR="#000000">in</FONT>
    <FONT COLOR="#000000">if</FONT> i <FONT COLOR="#000000">&gt;</FONT> 0 <FONT COLOR="#000000">then</FONT> nth_intlst1 <FONT COLOR="#000000">(</FONT>xs<FONT COLOR="#000000">,</FONT> i-1<FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">else</FONT> x
  <FONT COLOR="#000000">end</FONT>
</FONT></PRE>
*)
%}
#atscode2xmld("\
// the index is a natural number less than the size of the indexed length
fun nth_intlst1 {n,i:int | 0 <= i; i < n} (xs: intlst1 n, i: int i): int =
  // [val+] demands exhaustive pattern matching
  let val+ INTLST1cons (x, xs) = xs in
    if i > 0 then nth_intlst1 (xs, i-1) else x
  end // end of [let]
// end of [nth_intlst1]
")

Note that the pattern matching involved in the value declaration
<i>val+ INTLST1cons (x, xs) = xs</i> is
guaranteed to be exhaustive as <i>n</i> is positive. As a consequence, there
is no tag checking in the C code generated from the compilation of
<i>nth_intlst</i>. This simple example demonstrates that safety can
actually enhance efficiency.

<H4>A Polymorphic Datatype</H4> We can declare a datatype <i>list</i> as follows for
representing polymorphic lists:

%{
(*
<PRE><FONT COLOR="#E80000"><FONT COLOR=#"808080">// [t@ype] is a sort for types of unrestricted size
</FONT><FONT COLOR="#000000">datatype</FONT> <FONT COLOR="#0000FF">list <FONT COLOR="#000000">(</FONT>a<FONT COLOR="#000000">:</FONT>t@ype+<FONT COLOR="#000000">,</FONT> int<FONT COLOR="#000000">)</FONT></FONT> <FONT COLOR="#000000">=</FONT> <FONT COLOR="#787878">// polymorphic datatype
</FONT>  <FONT COLOR="#000000">|</FONT> nil <FONT COLOR="#0000FF"><FONT COLOR="#000000">(</FONT>a<FONT COLOR="#000000">,</FONT> 0<FONT COLOR="#000000">)</FONT></FONT>
  <FONT COLOR="#000000">|</FONT> <FONT COLOR="#000000">{</FONT><FONT COLOR="#0000FF">n<FONT COLOR="#000000">:</FONT>nat</FONT><FONT COLOR="#000000">}</FONT> cons <FONT COLOR="#0000FF"><FONT COLOR="#000000">(</FONT>a<FONT COLOR="#000000">,</FONT> n+1<FONT COLOR="#000000">)</FONT></FONT> <FONT COLOR="#000000">of</FONT> <FONT COLOR="#0000FF"><FONT COLOR="#000000">(</FONT>a<FONT COLOR="#000000">,</FONT> list <FONT COLOR="#000000">(</FONT>a<FONT COLOR="#000000">,</FONT> n<FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">)</FONT></FONT>
</FONT></PRE>
*)
%}
#atscode2xmld("\
// [t@ype] is a sort for types of unrestricted size
datatype list (a:t@ype+, int) = // polymorphic datatype
  | nil (a, 0)
  | {n:nat} cons (a, n+1) of (a, list (a, n))
")

The syntax used for declaring <i>list</i> introduces
two constructors of the following types:

<pre>
nil : {a:t@ype} list (a, 0)
cons : {a:t@ype} {n:nat} (a, list (a, n)) -> list (a, n+1)
</pre>

We use <i>a:t@ype+</i> (instead of <i>a:t@ype</i>) to indicate that the type
constructor <i>list</i> is covariant at this argument, that is,
<i>list (T1, n)</i> is considered to be a subtype of
<i>list (T2, n)</i> whenever <i>T1</i> is a subtype of <i>T2</i>.
<P>

The function for appending two polymorphic lists can be implemented as
follows:

%{
(*
<PRE><FONT COLOR="#E80000"><FONT COLOR="#000000">fun</FONT><FONT COLOR="#000000">{</FONT><FONT COLOR="#0000FF">a<FONT COLOR="#000000">:</FONT>t@ype</FONT><FONT COLOR="#000000">}</FONT> append_list <FONT COLOR="#0000FF"><FONT COLOR="#000000">{</FONT>m<FONT COLOR="#000000">,</FONT>n<FONT COLOR="#000000">:</FONT>nat<FONT COLOR="#000000">}</FONT></FONT>
  <FONT COLOR="#000000">(</FONT>xs<FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF">list <FONT COLOR="#000000">(</FONT>a<FONT COLOR="#000000">,</FONT> m<FONT COLOR="#000000">)</FONT></FONT><FONT COLOR="#000000">,</FONT> ys<FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF">list <FONT COLOR="#000000">(</FONT>a<FONT COLOR="#000000">,</FONT> n<FONT COLOR="#000000">)</FONT></FONT><FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF">list <FONT COLOR="#000000">(</FONT>a<FONT COLOR="#000000">,</FONT> m+n<FONT COLOR="#000000">)</FONT></FONT> <FONT COLOR="#000000">=</FONT>
  <FONT COLOR="#000000">case+</FONT> xs <FONT COLOR="#000000">of</FONT>
  <FONT COLOR="#000000">|</FONT> cons <FONT COLOR="#000000">(</FONT>x<FONT COLOR="#000000">,</FONT> xs<FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=&gt;</FONT> cons <FONT COLOR="#000000">(</FONT>x<FONT COLOR="#000000">,</FONT> append_list <FONT COLOR="#000000">(</FONT>xs<FONT COLOR="#000000">,</FONT> ys<FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">)</FONT>
  <FONT COLOR="#000000">|</FONT> nil <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=&gt;</FONT> ys
</FONT></PRE>
*)
%}
#atscode2xmld("\
fun{a:t@ype}
append_list {m,n:nat}
  (xs: list (a, m), ys: list (a, n)): list (a, m+n) =
  case+ xs of
  | cons (x, xs) => cons (x, append_list (xs, ys))
  | nil () => ys
// end of [append_list]
")

This function definition is a template. It can be typechecked but cannot be
compiled until the type variable <i>a</i> is instantiated with a type of
known size. The feature of templates in ATS is to be explained elsewhere.
<P>

As another example, the following code implements a (template) function
that zips together two given lists of the same length:

%{
(*
<PRE><FONT COLOR="#E80000"><FONT COLOR="#000000">fun</FONT><FONT COLOR="#000000">{</FONT><FONT COLOR="#0000FF">a1<FONT COLOR="#000000">,</FONT>a2<FONT COLOR="#000000">:</FONT>t@ype</FONT><FONT COLOR="#000000">}</FONT> zip_list <FONT COLOR="#0000FF"><FONT COLOR="#000000">{</FONT>n<FONT COLOR="#000000">:</FONT>nat<FONT COLOR="#000000">}</FONT></FONT>
  <FONT COLOR="#000000">(</FONT>xs1<FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF">list <FONT COLOR="#000000">(</FONT>a1<FONT COLOR="#000000">,</FONT> n<FONT COLOR="#000000">)</FONT></FONT><FONT COLOR="#000000">,</FONT> xs2<FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF">list <FONT COLOR="#000000">(</FONT>a2<FONT COLOR="#000000">,</FONT> n<FONT COLOR="#000000">)</FONT></FONT><FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF">list <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">'(</FONT>a1<FONT COLOR="#000000">,</FONT> a2<FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">,</FONT> n<FONT COLOR="#000000">)</FONT></FONT> <FONT COLOR="#000000">=</FONT>
  <FONT COLOR="#000000">case+</FONT> <FONT COLOR="#000000">(</FONT>xs1<FONT COLOR="#000000">,</FONT> xs2<FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">of</FONT>
  <FONT COLOR="#000000">|</FONT> <FONT COLOR="#000000">(</FONT>cons <FONT COLOR="#000000">(</FONT>x1<FONT COLOR="#000000">,</FONT> xs1<FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">,</FONT> cons <FONT COLOR="#000000">(</FONT>x2<FONT COLOR="#000000">,</FONT> xs2<FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=&gt;</FONT> cons <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">'(</FONT>x1<FONT COLOR="#000000">,</FONT> x2<FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">,</FONT> zip_list <FONT COLOR="#000000">(</FONT>xs1<FONT COLOR="#000000">,</FONT> xs2<FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">)</FONT>
  <FONT COLOR="#000000">|</FONT> <FONT COLOR="#000000">(</FONT>nil <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">,</FONT> nil <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=&gt;</FONT> nil <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT>
  <FONT COLOR="#000000">|</FONT> <FONT COLOR="#000000">(</FONT>_<FONT COLOR="#000000">,</FONT> _<FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=/=&gt;&gt;</FONT> <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT> <FONT COLOR="#787878">// other cases cannot occur
</FONT></FONT></PRE>
*)
%}
#atscode2xmld("\
fun{a1,a2:t@ype}
zip_list {n:nat}
  (xs1: list (a1, n), xs2: list (a2, n)): list ('(a1, a2), n) =
  case+ (xs1, xs2) of
  | (cons (x1, xs1), cons (x2, xs2)) => cons ('(x1, x2), zip_list (xs1, xs2))
  | (nil (), nil ()) => nil ()
  | (_, _) =/=>> () // none of these cases can occur
// end of [zip_list]
")

Note that the last clause in the definition of <i>zip_list</i> is presented
only for the purpose of illustration, and it can simply be omitted.

<HR SIZE=1 ALIGN=LEFT><P>
The code used for illustration is available <a href="datatypes.dats">here</a>.

#comment(" end of [datatypes.html] ")

%{
implement main () = fprint_filsub (stdout_ref, "datatypes_atxt.txt")
%}
