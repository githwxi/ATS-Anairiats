%{
//
#include "tutorial.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from datatypes.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
#comment("beg of [dataprops.html]")

<H2><A id="dataprops" name="dataprops">Dataprops</A></H2>

<HR SIZE=1 ALIGN=LEFT><P>

A prop is similar to a type. If a prop is assigned to a dynamic term, then
the term is guaranteed to be pure and total, that is, the evaluation of the
term generates no effects and always terminates. We refer to dynamic terms
classified by props as proof terms, or simply proofs. 

Dataprops are often declared for encoding recursively defined relations.
For instance, multiplication on integers can be defined as follows in
terms of integer addition:

<CENTER>
<TABLE>
<TABLE BORDER=0 CELLSPACING=0 CELLPADDING=2>

<TR>
  <TD ALIGN=RIGHT></TD>
  <TD ALIGN=CENTER></TD>
  <TD ALIGN=LEFT></TD>
  <TD ALIGN=LEFT></TD>
</TR>

<TR>
  <TD><i>0 * n</i>
  <TD><i>&nbsp;=&nbsp;</i><TD>
  <TD><i>0</i></TD>
  <TD></TD>
<TR>

<TR>
  <TD><i>(m+1) * n</i>
  <TD><i>&nbsp;=&nbsp;</i><TD>
  <TD><i>m * n + n</i></TD>
  <TD>; if <i>m >= 0 </i></TD>
<TR>

<TR>
  <TD><i>m * n</i>
  <TD><i>&nbsp;=&nbsp;</i><TD>
  <TD><i>-(-m * n)</i></TD>
  <TD>; if <i>m < 0 </i></TD>
<TR>

</TABLE>
</CENTER>
<P>

Let <i>MUL(m, n, p)</i> be a relation on integers such that
<i>MUL(m, n, p)</i> holds if and only if <i>m * n = p</i>.
Then this relation can be encoded by the followng dataprop:

%{
(*<PRE><FONT COLOR="#E80000"><FONT COLOR="#000000">dataprop</FONT> <FONT COLOR="#009000"><FONT COLOR="#0000FF">MUL <FONT COLOR="#000000">(</FONT>int<FONT COLOR="#000000">,</FONT> int<FONT COLOR="#000000">,</FONT> int<FONT COLOR="#000000">)</FONT></FONT> <FONT COLOR="#000000">=</FONT>
  <FONT COLOR="#000000">|</FONT> <FONT COLOR="#000000">{</FONT><FONT COLOR="#0000FF">n<FONT COLOR="#000000">:</FONT>int</FONT><FONT COLOR="#000000">}</FONT> MULbas <FONT COLOR="#0000FF"><FONT COLOR="#000000">(</FONT>0<FONT COLOR="#000000">,</FONT> n<FONT COLOR="#000000">,</FONT> 0<FONT COLOR="#000000">)</FONT></FONT>
  <FONT COLOR="#000000">|</FONT> <FONT COLOR="#000000">{</FONT><FONT COLOR="#0000FF">m<FONT COLOR="#000000">,</FONT>n<FONT COLOR="#000000">,</FONT>p<FONT COLOR="#000000">:</FONT>int</FONT> <FONT COLOR="#000000">|</FONT> <FONT COLOR="#0000FF">m &gt;= 0</FONT><FONT COLOR="#000000">}</FONT> MULind <FONT COLOR="#0000FF"><FONT COLOR="#000000">(</FONT>m+1<FONT COLOR="#000000">,</FONT> n<FONT COLOR="#000000">,</FONT> p+n<FONT COLOR="#000000">)</FONT></FONT> <FONT COLOR="#000000">of</FONT> <FONT COLOR="#0000FF">MUL <FONT COLOR="#000000">(</FONT>m<FONT COLOR="#000000">,</FONT> n<FONT COLOR="#000000">,</FONT> p<FONT COLOR="#000000">)</FONT></FONT>
  <FONT COLOR="#000000">|</FONT> <FONT COLOR="#000000">{</FONT><FONT COLOR="#0000FF">m<FONT COLOR="#000000">,</FONT>n<FONT COLOR="#000000">,</FONT>p<FONT COLOR="#000000">:</FONT>int</FONT> <FONT COLOR="#000000">|</FONT> <FONT COLOR="#0000FF">m <FONT COLOR="#000000">&gt;</FONT> 0</FONT><FONT COLOR="#000000">}</FONT> MULneg <FONT COLOR="#0000FF"><FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">~</FONT>m<FONT COLOR="#000000">,</FONT> n<FONT COLOR="#000000">,</FONT> <FONT COLOR="#000000">~</FONT>p<FONT COLOR="#000000">)</FONT></FONT> <FONT COLOR="#000000">of</FONT> <FONT COLOR="#0000FF">MUL <FONT COLOR="#000000">(</FONT>m<FONT COLOR="#000000">,</FONT> n<FONT COLOR="#000000">,</FONT> p<FONT COLOR="#000000">)</FONT></FONT></FONT>
</FONT></PRE>
*)
%}
#atscode2xmld("\
dataprop MUL (int, int, int) =
  | {n:int} MULbas (0, n, 0)
  | {m,n,p:int | m >= 0} MULind (m+1, n, p+n) of MUL (m, n, p)
  | {m,n,p:int | m > 0} MULneg (~m, n, ~p) of MUL (m, n, p)
// end of [MUL]
")

<I>Proposition (Totality)
For each pair of integers <i>m</i> and <i>n</i>, there exists an
integer <i>p</i> such that <i>m * n = p</i> holds.
</I>
<P>

This proposition can be encoded as the following prop in ATS:

<pre>
{m,n:int} () -< prf > [p:int] MUL (m, n, p)
</pre>

which is assigned to the function <i>MULprop_total</i> defined below:

%{
(*
<PRE><FONT COLOR="#E80000"><FONT COLOR="#000000">prfun</FONT> <FONT COLOR="#009000">MULprop_total <FONT COLOR="#0000FF"><FONT COLOR="#000000">{</FONT>m<FONT COLOR="#000000">,</FONT>n<FONT COLOR="#000000">:</FONT>int<FONT COLOR="#000000">}</FONT></FONT> <FONT COLOR="#0000FF"><FONT COLOR="#000000">.&lt;</FONT> max<FONT COLOR="#000000">(</FONT>2*m<FONT COLOR="#000000">,</FONT><FONT COLOR="#000000">~</FONT>2*m+1<FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">&gt;.</FONT></FONT> <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF"><FONT COLOR="#000000">[</FONT>p<FONT COLOR="#000000">:</FONT>int<FONT COLOR="#000000">]</FONT> MUL <FONT COLOR="#000000">(</FONT>m<FONT COLOR="#000000">,</FONT> n<FONT COLOR="#000000">,</FONT> p<FONT COLOR="#000000">)</FONT></FONT> <FONT COLOR="#000000">=</FONT>
  <FONT COLOR="#009000"><FONT COLOR="#000000">sif</FONT> <FONT COLOR="#0000FF">m <FONT COLOR="#000000">&gt;</FONT> 0</FONT> <FONT COLOR="#000000">then</FONT> MULind <FONT COLOR="#000000">(</FONT>MULprop_total <FONT COLOR="#0000FF"><FONT COLOR="#000000">{</FONT>m-1<FONT COLOR="#000000">,</FONT>n<FONT COLOR="#000000">}</FONT></FONT> <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">)</FONT>
  <FONT COLOR="#000000">else</FONT> <FONT COLOR="#009000"><FONT COLOR="#000000">sif</FONT> <FONT COLOR="#0000FF">m <FONT COLOR="#000000">&lt;</FONT> 0</FONT> <FONT COLOR="#000000">then</FONT> MULneg <FONT COLOR="#000000">(</FONT>MULprop_total <FONT COLOR="#0000FF"><FONT COLOR="#000000">{</FONT><FONT COLOR="#000000">~</FONT>m<FONT COLOR="#000000">,</FONT>n<FONT COLOR="#000000">}</FONT></FONT> <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">)</FONT>
  <FONT COLOR="#000000">else</FONT> MULbas <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT></FONT></FONT></FONT>
</FONT></PRE>
*)
%}
#atscode2xmld("\
prfun MULprop_total
  {m,n:int}
  .< max(2*m,~2*m+1) >.
  (): [p:int] MUL (m, n, p) =
  sif m > 0 then MULind (MULprop_total {m-1,n} ())
  else sif m < 0 then MULneg (MULprop_total {~m,n} ())
  else MULbas ()
// end of [MULprop_total]
")

Note that we use <i>sif</i> for constructing a static conditional in which
the condition is a static proposition, that is, a static term of sort
<i>bool</i>. The conditions for the two occurrences of <i>sif</i> are
<i>m > 0</i> and <i>m < 0</i>, which are both static propositions.
<P>
Given that the prop <i>{m,n:int} () -< prf > [p:int] MUL (m, n, p)</i>
is inhabited, we know that the proposition it encodes must hold.
<P>

<I>Proposition (Uniqueness)
Given integers <i>m,n,p1,p2</i> such that
<i>m * n = p1</i> and <i>m * n = p2</i>, then
<i>p1 = p2</i> holds.
</I>
<P>

This proposition can be encoded as the following prop in ATS:

<pre>
{m,n,p1,p2:int} (MUL (m, n, p1), MUL (m, n, p2)) -< prf > [p1 == p2] void
</pre>

which is assigned to the function <i>MULprop_unique</i> defined below:

%{
(*
<PRE><FONT COLOR="#E80000">
<FONT COLOR="#000000">prfun</FONT> <FONT COLOR="#009000">MULprop_unique <FONT COLOR="#0000FF"><FONT COLOR="#000000">{</FONT>m<FONT COLOR="#000000">,</FONT>n<FONT COLOR="#000000">,</FONT>p1<FONT COLOR="#000000">,</FONT>p2<FONT COLOR="#000000">:</FONT>int<FONT COLOR="#000000">}</FONT></FONT> <FONT COLOR="#0000FF"><FONT COLOR="#000000">.&lt;</FONT> max<FONT COLOR="#000000">(</FONT>2*m<FONT COLOR="#000000">,</FONT> <FONT COLOR="#000000">~</FONT>2*m+1<FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">&gt;.</FONT></FONT>
  <FONT COLOR="#000000">(</FONT>pf1<FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF">MUL <FONT COLOR="#000000">(</FONT>m<FONT COLOR="#000000">,</FONT> n<FONT COLOR="#000000">,</FONT> p1<FONT COLOR="#000000">)</FONT></FONT><FONT COLOR="#000000">,</FONT> pf2<FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF">MUL <FONT COLOR="#000000">(</FONT>m<FONT COLOR="#000000">,</FONT> n<FONT COLOR="#000000">,</FONT> p2<FONT COLOR="#000000">)</FONT></FONT><FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">:</FONT> <FONT COLOR="#0000FF"><FONT COLOR="#000000">[</FONT>p1 == p2<FONT COLOR="#000000">]</FONT> void</FONT> <FONT COLOR="#000000">=</FONT>
  <FONT COLOR="#000000">case+</FONT> <FONT COLOR="#000000">(</FONT>pf1<FONT COLOR="#000000">,</FONT> pf2<FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">of</FONT>
  <FONT COLOR="#000000">|</FONT> <FONT COLOR="#000000">(</FONT>MULbas <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">,</FONT> MULbas <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT><FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=&gt;</FONT> <FONT COLOR="#000000">(</FONT><FONT COLOR="#000000">)</FONT>
  <FONT COLOR="#000000">|</FONT> <FONT COLOR="#000000">(</FONT>MULind pf1<FONT COLOR="#000000">,</FONT> MULind pf2<FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=&gt;</FONT> MULprop_unique <FONT COLOR="#000000">(</FONT>pf1<FONT COLOR="#000000">,</FONT> pf2<FONT COLOR="#000000">)</FONT>
  <FONT COLOR="#000000">|</FONT> <FONT COLOR="#000000">(</FONT>MULneg pf1<FONT COLOR="#000000">,</FONT> MULneg pf2<FONT COLOR="#000000">)</FONT> <FONT COLOR="#000000">=&gt;</FONT> MULprop_unique <FONT COLOR="#000000">(</FONT>pf1<FONT COLOR="#000000">,</FONT> pf2<FONT COLOR="#000000">)</FONT></FONT>
</FONT></PRE>
*)
%}
#atscode2xmld("\
prfun MULprop_unique
  {m,n,p1,p2:int} .< max(2*m, ~2*m+1) >.
  (pf1: MUL (m, n, p1), pf2: MUL (m, n, p2)): [p1 == p2] void =
  case+ (pf1, pf2) of
    | (MULbas (), MULbas ()) => ()
    | (MULind pf1, MULind pf2) => MULprop_unique (pf1, pf2)
    | (MULneg pf1, MULneg pf2) => MULprop_unique (pf1, pf2)
// end of [MULprop_unique]
")

Therefore, the prop is inhabited and thus the proposition it
encodes must hold.

<P>

The distributivity (over addition), commutativity and associativity of
multiplication can all be esstablished similarly.

<HR SIZE=1 ALIGN=LEFT><P>
The code used for illustration is available <a href="dataprops.dats">here</a>.

#comment("end of [dataprops.html]")

%{
implement main () = fprint_filsub (stdout_ref, "dataprops_atxt.txt")
%}
