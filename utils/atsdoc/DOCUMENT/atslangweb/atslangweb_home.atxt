%{
//
dynload "libatsdoc/dynloadall.dats"
//
staload STDIO = "libc/SATS/stdio.sats"
//
(* ****** ****** *)
//
#define ISTEMP 0
//
#include "atslangwebatxt.dats"
//
val _ATSLANGWEBHOME: atext =
  strcst"<strong>Home</strong>"
val () = theAtextMap_insert_str ("ATSLANGWEBHOME", _ATSLANGWEBHOME)
//
(* ****** ****** *)
//
#include "atslangweb_layout.dats"
//
(* ****** ****** *)
//
val
theCSSfilr =
$STDIO.fopen_ref_exn
  ("styles/atslangweb_home.css", file_mode_w)
//
val () =
fprint (theCSSfilr, "@import url(./atslangweb_temp.css);\n\n")
//
val () =
fprint (theCSSfilr, "@import url(./atslangweb_jsddm_menu.css);\n\n")
//
fun addcssrule
  (rule: string): atext = let
  val () = fprint_string (theCSSfilr, rule) in atext_nil ()
end // end of [addcssrule]
//
(* ****** ****** *)
//
%}

#strsub[theStyleSheetLink]("\
./styles/atslangweb_home.css\
")

#ignoretxt(
#strsub[thePageHeaderSeparator]('\
<div class="Page-mysitelinks">
#mysitelinks2("HOME")
</div>
'))

#addcssrule("\
\#thePageBody-prop {
padding-left: 10px ;
padding-right: 10px ;
}
")
#strsub[thePageBody]('
<div id="thePageBody-prop">

<!-- ****** ****** -->

<h1>About ATS</h1>
#menu('\
#litxt(#ulink("\#what_is_ats", "What is ATS?"))
#litxt(#ulink("\#what_is_ats_good_for", "What is ATS good for?"))
#litxt(#ulink("\#acknowledgments", "Acknowledgments"))
')#comment("menu")

#HR(2)

<h2>#uid("what_is_ats", "What is ATS?")</h2>

#para('\

ATS is a statically typed programming language that unifies implementation
with formal specification. It is equipped with a highly expressive type
system rooted in the framework <em>Applied Type System</em>, which gives
the language its name.  In particular, both dependent types and linear
types are available in ATS.\

')#comment("para")

#para('\
The current implementation of ATS2 (ATS/Postiats) is written in ATS1
(ATS/Anairiats). ATS can be as efficient as C/C++ both time-wise and
memory-wise (see #ulink("http://shootout.alioth.debian.org/", "The Computer
Language Benchmarks Game") for concrete evidence) and supports a variety of
programming paradigms that include:\

')#comment("para")

#menu('\
#litxt(
#para("\
<strong>Functional programming</strong>.
The core of ATS is a functional language based on eager
(aka. call-by-value) evaluation, which can also accommodate lazy
(aka. call-by-need) evaluation. The availability of linear types in ATS
often makes functional programs written in it run not only with
surprisingly high efficiency (when compared to C) but also with
surprisingly small (memory) footprint (when compared to C as well).
"))

#litxt(
#para("\
<strong>Imperative programming</strong>.
The novel and unique approach to imperative programming in ATS is firmly
rooted in the paradigm of <em>programming with theorem-proving</em>. The
type system of ATS allows many features considered dangerous in other
languages (e.g., explicit pointer arithmetic and explicit memory
allocation/deallocation) to be safely supported in ATS, making ATS a viable
programming language for low-level systems programming.
"))

#litxt(
#para("
<strong>Concurrent programming</strong>.
ATS, equipped with a multicore-safe implementation of garbage collection,
can support multithreaded programming through the use of pthreads. The
availability of linear types for tracking and safely manipulating resources
provides an effective means to constructing reliable programs that can take
advantage of multicore architectures.
"))

#litxt(#para("
<strong>Modular programming</strong>. The module system of ATS is largely
infuenced by that of Modula-3, which is both simple and general as well as
effective in supporting large scale programming.
"))
')#comment("menu")

#para('\

In addition, ATS contains a subsystem ATS/LF that supports a form of
(interactive) theorem-proving, where proofs are constructed as total
functions.  With this component, ATS advocates a
<em>programmer-centric</em> approach to program verification that combines
programming with theorem-proving in a syntactically intertwined
manner. Furthermore, this component can serve as a logical framework for
encoding deduction systems and their (meta-)properties.

')#comment("para")

#HR(1)

<h2>#uid("what_is_ats_good_for", "What is ATS good for?")</h2>

#menu('\
#litxt(
#para("
ATS can enforce great precision in practical programming.
"))

#litxt(
#para("
ATS allows the programmer to write efficient functional programs that
directly manipulate native unboxed data representation.
"))

#litxt(
#para("
ATS allows the programmer to reduce the memory footprint of a program
by making use of linear types.
"))

#litxt(
#para("
ATS allows the programmer to enhance the safety (and efficiency) of a
program by making use of theorem-proving.
"))

#litxt(
#para("
ATS allows the programmer to write safe low-level code that runs in OS
kernels.
"))

#litxt(
#para("
ATS can help teach type theory, demonstrating concretely
the power and potential of types in constructing high-quality software.
"))
')#comment("menu")

#HR(1)

<h2>#uid("acknowledgments", "Acknowledgments")</h2>

#para('\

The development of ATS has been funded in part by <a
href="http://www.nsf.gov">National Science Foundation</a> (NSF) under the
grants no. CCR-0081316/CCR-0224244, no. CCR-0092703/0229480,
no. CNS-0202067, no. CCF-0702665 and no CCF-1018601. As always, <em>any
opinions, findings, and conclusions or recommendations expressed here are
those of the author(s) and do not necessarily reflect the views of the
NSF.</em>

')#comment("para")

<!-- ****** ****** -->

</div>#comment("div/id=thePageBody-prop")
')#comment("strsub")

<!-- ****** ****** -->

#ignoretxt(
#strsub[thePageFooterSeparator]('\
<div class="Page-mysitelinks">
#mysitelinks3("HOME")
</div>
'))

%{
implement
main () = {
//
val () =  $STDIO.fclose_exn (theCSSfilr)
//
val () = fprint_filsub (stdout_ref, "atslangweb_temp.html")
//
} // end of [main]
%}\
