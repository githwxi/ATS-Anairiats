<!--
The file is automatically generated by [atsdoc] from main.atxt.
-->
<!--
Time of Generation: Thu Jan 29 10:11:58 2015
-->
<chapter id="datatypes">
<title>Datatypes</title>

<para>A datatype is like a tagged union type. For each datatype, there are
some constructors associated with it, and these constructors are needed for
constructing values of the datatype.  As an example, the following syntax
declares a datatype named <code>intopt</code>:

<informalexample><programlisting><![CDATA[datatype intopt =
  | intopt_none of () | intopt_some of (int)
// end of [intopt]
]]></programlisting></informalexample>


There are two constructors associated with <code>intopt</code>:
<code>intopt_none</code>, which is nullary, and <code>intopt_some</code>,
which is unary. For instance, <code>intopt_none()</code> and
<code>intopt_some(1)</code> are two values of the type <code>intopt</code>.
In order for accessing components in such values, a mechanism often
referred to as pattern-matching is provided in ATS. I will demonstrate
through examples that datatypes plus pattern matching can offer not only
great convenience in programming but also clarity in code.
</para><!--para-->

<para>The code employed for illustration in this chapter plus some
additional code for testing is available <ulink url="http://www.ats-lang.org/DOCUMENT/INTPROGINATS/CODE/CHAPTER_DATATYPES/">on-line</ulink>.
</para>

<sect1 id="patterns">
<title>Patterns</title>

<para>Patterns in ATS can be defined inductively as follows:

<itemizedlist>

<listitem>
<para>Certain constant values such booleans, chars, floating
point numbers, integers and strings are patterns.
</para>
</listitem>

<listitem>
<para>The void value () is a pattern.
</para>
</listitem>

<listitem>
<para>The underscore symbol <code>_</code> represents a special wildcard pattern.
</para>
</listitem>

<listitem>
<para>Variables are patterns.
</para>
</listitem>

<listitem>
<para>
A tuple of patterns, either boxed or unboxed, is a pattern.
</para>
</listitem>

<listitem>
<para>
A record of patterns, either boxed or unboxed, is a pattern.
</para>
</listitem>

<listitem>
<para>
Given a constructor C, a pattern can be formed by applying C to
a given list of patterns.
</para>
</listitem>

<listitem>
<para>
Given a variable x and a pattern pat, (x <code>as</code> pat) is a referenced
pattern, where <code>as</code> is a keyword.
</para>
</listitem>

<listitem>
<para>
Some other forms of patterns will be introduced elsewhere.
</para>
</listitem>

</itemizedlist>

Each variable can occur at most once in a given pattern, and this is
referred as the linearity restriction on variables in patterns. For
instance, (x, x) is not a legal pattern as the variable x appears twice in
it. However, this restriction does not apply to the variable
<code>_</code>, which represents the wildcard pattern.
</para><!--para-->

</sect1><!--id="patterns"-->

<!-- ****** ****** -->

<sect1 id="pattern-matching">
<title>Pattern-Matching</title>

<para>Pattern matching means matching values against patterns. In the case
where a value matches a pattern, a collection of bindings are generated
between the variables in the pattern and certain components in the
value. Pattern-matching is performed according to the following set of
rules:

<itemizedlist>

<listitem>
<para>A value that matches a constant pattern must be the same constant, and this
matching generates no bindings.
</para>
</listitem>

<listitem>
<para>The void value () only matches the pattern (), and this matching generates
no bindings.
</para>
</listitem>

<listitem>
<para>Any value can match the wildcard pattern, and this matching generates no bindings.
</para>
</listitem>

<listitem>
<para>Any value can match a variable pattern, and this matching generates a
binding between the variable and the value.
</para>
</listitem>

<listitem>
<para>A tuple value matches a tuple pattern if they are of the same length
and each value component in the former matches the corresponding pattern
component in the latter, and this matching generates a collection of
bindings that is the union of the bindings generated from matching the
value components in the tuple value against the pattern components in the
tuple pattern.
</para>
</listitem>

<listitem>
<para>A record value matches a record pattern if they have the
same field names and each value component in the former matches the
corresponding pattern component in the latter, and this matching generates
a collection of bindings that is the union of the bindings generated from
matching the value components in the record value against the pattern
components in the record pattern.
</para>
</listitem>

<listitem>
<para>Given a pattern formed by applying a constructor C to
some pattern arguments, a value matches this pattern if the value is formed
by applying C to some value arguments matching the pattern arguments, and
this matching generates a collection of bindings that is the union of the
bindings generated from matching the value arguments against the pattern
arguments.
</para>
</listitem>

<listitem>
<para>Given a referenced pattern (x <code>as</code> pat), a
value matches the pattern if it matches pat, and this matching generates a
collection of bindings that extends the bindings generated from matching
the value against pat with a binding from x to the value.
</para>
</listitem>

</itemizedlist>

Suppose we have a tuple value (0, 1, 2, 3) and a tuple pattern (0, _, x,
y). Then the value matches the pattern and this matching yields bindings
from x and y to 2 and 3, respectively.
</para><!--para-->

</sect1><!--id="pattern-matching"-->

<!-- ****** ****** -->

<sect1 id="matching_clauses_and_case-expressions">
<title>Matching Clauses and Case-Expressions</title>

<para>Given a pattern pat and an expression exp, (pat <code>=></code> exp) is a
matching clause. The pattern pat and the expression exp are referred to as
the guard and the body of the matching clause.
</para>

<para>Given an expression exp0 and a sequence of matching clauses clseq, a
case-expression can be formed as such: (<code>case</code> exp0
<code>of</code> clseq). To evaluate the case-expression under a given
environment ENV0, we first evaluate exp0 under ENV0 to a value. If this
value does not match the guard of any clause in clseq, then the evaluation
of the case-expression aborts. Otherwise, we choose the first clause in
clseq such that the value matches its guard. Let ENV1 be the environment
that extends ENV0 with the bindings generated from this matching, and we
evaluate the body of the chosen clause under ENV1. The value obtained
from this evaluation is the value of the case-expression being evaluated.
</para>

</sect1><!--id="matching_clauses_and_case-expressions"-->

<!-- ****** ****** -->

<sect1 id="enumerative_datatypes">
<title>Enumerative Datatypes</title>
<para>The simplest form of datatypes is for enumerating a finite number
of constants. For instance, the following concrete syntax introduces
a datatype of the name <code>wday</code>:

<informalexample><programlisting><![CDATA[datatype wday =
  | Monday of ()
  | Tuesday of ()
  | Wednesday of ()
  | Thursday of ()
  | Friday of ()
  | Saturday of ()
  | Sunday of ()
// end of [wday]
]]></programlisting></informalexample>


where the first bar symbol (|) is optional.  There are 7 nullary
constructors introduced in the datatype declaration: <code>Monday</code>
through <code>Sunday</code>, which are for constructing values of the type
<code>wday</code>. For instance, <code>Monday()</code> is a value of the
type <code>wday</code>. Given a nullary constructor C, we can write C for
C() as a value. For instance, we can write <code>Monday</code> for
<code>Monday()</code>. However, one should <emphasis>not</emphasis> assume
that <code>Tuesday</code> is something like <code>Monday+1</code>.
</para><!--para-->

<para>The following code implements a function that tests whether
a given value of the type <code>wday</code> is a weekday or not:

<informalexample><programlisting><![CDATA[fun isWeekday
  (x: wday): bool = case x of
  | Monday () => true // the bar (|) is optional for the first clause
  | Tuesday () => true
  | Wednesday () => true
  | Thursday () => true
  | Friday () => true
  | Saturday () => false
  | Sunday () => false
// end of [isWeekday]
]]></programlisting></informalexample>


Given a unary constructor C, C() is a pattern that can only match the value
C(). Note that C() <emphasis>cannot</emphasis> be written as C when it is
used as a pattern. If <code>Monday ()</code> is written as
<code>Monday</code> in the body of the function <code>isWeekday</code>,
then an error message is to be reported during typechecking, indicating
that all the clauses after the first one are redundant. This is simply due
to <code>Monday</code> being treated as a variable pattern, which is
matched by any value. A likely more sensible implementation of
<code>isWeekday</code> is given as follows:

<informalexample><programlisting><![CDATA[fun isWeekday
  (x: wday): bool = case x of
  | Saturday () => false | Sunday () => false | _ => true
// end of [isWeekday]
]]></programlisting></informalexample>


This implementation works because pattern-matching is done sequentially at
run-time: If a value of the type <code>wday</code> does not match either of
<code>Saturday ()</code> and <code>Sunday ()</code>, then it must match one
of <code>Monday ()</code> , <code>Tuesday ()</code> , <code>Wednesday
()</code> , <code>Thursday ()</code> and <code>Friday ()</code>.
</para><!--para-->

</sect1><!--id="enumerative_datatypes"-->

<!-- ****** ****** -->

<sect1 id="recursive_datatypes">
<title>Recursive Datatypes</title>

<para>A recursive datatype is one such that its associated constructors
may form values by applying to values of the datatype itself. For instance,
the following declared datatype <code>charlst</code> is recursive:

<informalexample><programlisting><![CDATA[datatype charlst =
  | charlst_nil of () | charlst_cons of (char, charlst)
// end of [charlst]
]]></programlisting></informalexample>


When applied to a character and a value of the type <code>charlst</code>,
the constructor <code>charlst_cons</code> forms a value of the type
<code>charlst</code>. As an example, the following value represents a
character list consisting of 'a', 'b' and 'c':

<informalexample><programlisting><![CDATA[char_cons ('a', char_cons ('b', char_cons ('c', char_nil ())))
]]></programlisting></informalexample>


We can define a function <code>charlst_length</code> as follows to compute
the length of a given character list:

<informalexample><programlisting><![CDATA[fun charlst_length (cs: charlst): int =
  case cs of
  | charlst_cons (_, cs) => 1 + charlst_length (cs)
  | charlst_nil () => 0
// end of [charlst_length]
]]></programlisting></informalexample>


Note that this implementation is recursive but not tail-recursive. By
relying on the commutativity and associativity of integer addition, we can
give the following implementation of <code>charlst_length</code> that is
tail-recursive:

<informalexample><programlisting><![CDATA[fun charlst_length
  (cs: charlst): int = let
  fun loop (cs: charlst, n: int): int = case cs of
    | charlst_cons (_, cs) => loop (cs, n+1) | charlst_nil () => n
  // end of [loop]
in
  loop (cs, 0)
end // end of [charlst_length]
]]></programlisting></informalexample>


Note that the naming convention I follow closely in this book (and
elsewhere) mandates that only a tail-recursive function be given a name
indicative of its being a loop. A non-tail-recursive function is not called
a loop because it cannot be translated directly to a loop in an imperative
programming language like C.

</para><!--para-->

</sect1><!--id="recursive_datatypes"-->

<!-- ****** ****** -->

<sect1 id="exhaustiveness_of_pattern-matching">
<title>Exhaustiveness of Pattern-Matching</title>

<para>Given a type T and a set of patterns, if for any given value of the
type T there is always at least one pattern in the set such that the value
matches the pattern, then pattern-matching values of the type T against the
set of patterns is exhaustive.  Given a case-expression of the form
(<code>case</code> exp0 <code>of</code> clseq), where exp0 is assumed to be
of some type T, if pattern-matching values of the type T against the guards
of the matching clauses in clseq is exhaustive, then the case-expression is
said to be pattern-matching-exhaustive.
</para><!--para-->

<para>The following code implements a function that finds the last character
in a non-empty character list:

<informalexample><programlisting><![CDATA[fun charlst_last
  (cs: charlst): char = case cs of
  | charlst_cons (c, charlst_nil ()) => c
  | charlst_cons (_, cs1) => charlst_last (cs1)
// end of [charlst_last]
]]></programlisting></informalexample>


The body of <code>charlst_last</code> is a case-expression, which is not
pattern-matching-exhaustive: If <code>cs</code> is bound to the value
<code>charlst_nil()</code>, that is, the empty character list, than none
of the matching clauses in the case-expression can be chosen. When the code
is typechecked by atsopt, a warning message is issued to indicate the
case-expression being non-pattern-matching-exhaustive. If the programmer
wants an error message instead, the keyword <code>case</code> should be
replaced with <code>case+</code>.  If the programmer wants to suppress the
warning message, the keyword <code>case</code> should be replaced with
<code>case-</code>. I myself mostly use <code>case+</code> when coding in ATS.
</para><!--para-->

<para>The function <code>charlst_last</code> can also be implemented as follows:

<informalexample><programlisting><![CDATA[fun charlst_last
  (cs: charlst): char = case cs of
  | charlst_cons (c, cs1) => (case+ cs1 of
      charlst_nil () => c | charlst_cons _ => charlst_last (cs1)
    ) // end of [char_cons]
// end of [charlst_last]
]]></programlisting></informalexample>


In this implementation, the outer case-expression is not
pattern-matching-exhaustive while the inner one is. Note that the pattern
<code>charlst_cons _</code> is just a shorthand for <code>charlst_cons (_,
_)</code>. In general, a pattern of the from (C _), where C is a
constructor, can be matched by any value that is constructed by applying C
to some values. For instance, the pattern <code>charlst_nil () </code> can
also be written as <code>charlst_nil _</code>.
</para><!--para-->

<para>Suppose we have a case-expression containing only one matching
clause, that is, the case-expression is of the form (<code>case</code> exp0
<code>of</code> pat <code>=></code> exp).  Then we can also write this
case-expression as a let-expression: (<code>let</code> <code>val</code> pat
<code>=</code> exp0 <code>in</code> exp <code>end</code>). For instance, we
give another implementation of the function <code>charlst_last</code> as
follows:

<informalexample><programlisting><![CDATA[fun charlst_last
  (cs: charlst): char = let
  val charlst_cons (c, cs1) = cs in case+ cs1 of
  | charlst_nil () => c | charlst_cons _ => charlst_last (cs1)
end // end of [charlst_last]
]]></programlisting></informalexample>


When this implementation is typechecked by atsopt, a warning message is
issued to indicate the val-declaration being
non-pattern-matching-exhaustive. If the programmer wants an error message
instead, the keyword <code>val</code> should be replaced with
<code>val+</code>.  If the programmer wants to suppress the warning
message, the keyword <code>val</code> should be replaced with
<code>val-</code>.
</para><!--para-->

<para>As values formed by the constructors <code>charlst_nil</code> and
<code>charlst_cons</code> are assigned the same type <code>charlst</code>,
it is impossible to rely on typechecking to prevent the function
<code>charlst_last</code> from being applied to an empty character list.
This is a serious limitation.  With dependent types, which allow data to be
described much more precisely, we can ensure at the level of types that a
function finding the last element of a list can only be applied to a
non-empty list.
</para>

</sect1><!--id="exhaustiveness_of_pattern-matching"-->

<!-- ****** ****** -->

<sect1 id="example_evaluating_arithmetic_expressions">
<title>
Example: Evaluating Integer Expressions
</title>

<para>For representing integer expressions, we declare a datatype
<code>IEXP</code> as follows:

<informalexample><programlisting><![CDATA[datatype IEXP =
  | IEXPnum of int // numeral
  | IEXPneg of (IEXP) // negative
  | IEXPadd of (IEXP, IEXP) // addition
  | IEXPsub of (IEXP, IEXP) // subtraction
  | IEXPmul of (IEXP, IEXP) // multiplication
  | IEXPdiv of (IEXP, IEXP) // division
// end of [IEXP]
]]></programlisting></informalexample>


The meaning of the constructors associated with <code>IEXP</code> should be
obvious. A value of the type <code>IEXP</code> is often referred to as an
abstract syntax tree. For instance, the abstract syntax tree for the
expression (~1+(2-3)*4) is the following one:

<informalexample><programlisting><![CDATA[IEXPadd(IEXPneg(IEXPnum(1)), IEXPmul(IEXPsub(IEXPnum(2), IEXP(3)), IEXP(4)))
]]></programlisting></informalexample>


Translating an integer expression written in some string form into an
abstract syntax tree is called parsing, which we will not do here. The
following defined function <code>eval_iexp</code> takes the abstract syntax
tree of an integer expression and returns an integer that is the value of
the expression:

<informalexample><programlisting><![CDATA[fun eval_iexp (e0: IEXP): int = case+ e0 of
  | IEXPnum n => n
  | IEXPneg (e) => ~eval_iexp (e)
  | IEXPadd (e1, e2) => eval_iexp (e1) + eval_iexp (e2)
  | IEXPsub (e1, e2) => eval_iexp (e1) - eval_iexp (e2)
  | IEXPmul (e1, e2) => eval_iexp (e1) * eval_iexp (e2)
  | IEXPdiv (e1, e2) => eval_iexp (e1) / eval_iexp (e1)
// end of [eval_iexp]
]]></programlisting></informalexample>

</para><!--para-->

<para>Suppose we also allow the construct if-then-else to be use in
forming integer expressions. For instance, we may write an integer
expression like (if 1+2 <= 3*4 then 5+6 else 7-8). Note that the test (1+2
<= 3*4) is a boolean expression rather than an integer expression. This
indicates that we also need to declare a datatype <code>BEXP</code> for
representing boolean expressions. Furthermore, <code>IEXP</code> and
<code>BEXP</code> should be defined mutually recursively, which is shown in
the following code:

<informalexample><programlisting><![CDATA[datatype IEXP =
  | IEXPcst of int // integer constants
  | IEXPneg of (IEXP) // negative
  | IEXPadd of (IEXP, IEXP) // addition
  | IEXPsub of (IEXP, IEXP) // subtraction
  | IEXPmul of (IEXP, IEXP) // multiplication
  | IEXPdiv of (IEXP, IEXP) // division
  | IEXPif of (BEXP(*test*), IEXP(*then*), IEXP(*else*))
// end of [IEXP]

and BEXP = // [and] for combining datatype declarations
  | BEXPcst of bool // boolean constants
  | BEXPneg of BEXP // negation
  | BEXPconj of (BEXP, BEXP) // conjunction
  | BEXPdisj of (BEXP, BEXP) // disjunction
  | BEXPeq of (IEXP, IEXP) // equal-to
  | BEXPneq of (IEXP, IEXP) // not-equal-to
  | BEXPlt of (IEXP, IEXP) // less-than
  | BEXPlte of (IEXP, IEXP) // less-than-equal-to
  | BEXPgt of (IEXP, IEXP) // greater-than
  | BEXPgte of (IEXP, IEXP) // greater-than-equal-to
// end of [BEXP]
]]></programlisting></informalexample>


Evidently, we also need to evaluate boolean expressions when evaluating
integer expressions. The following two functions <code>eval_iexp</code> and
<code>eval_bexp</code> for evaluating integer and boolean expressions,
respectively, are defined mutually recursively as is expected:

<informalexample><programlisting><![CDATA[fun eval_iexp (e0: IEXP): int = case+ e0 of
  | IEXPcst n => n
  | IEXPneg (e) => ~eval_iexp (e)
  | IEXPadd (e1, e2) => eval_iexp (e1) + eval_iexp (e2)
  | IEXPsub (e1, e2) => eval_iexp (e1) - eval_iexp (e2)
  | IEXPmul (e1, e2) => eval_iexp (e1) * eval_iexp (e2)
  | IEXPdiv (e1, e2) => eval_iexp (e1) / eval_iexp (e1)
  | IEXPif (e_test, e_then, e_else) => let
      val b = eval_bexp (e_test) in eval_iexp (if b then e_then else e_else)
    end // end of [IEXPif]
// end of [eval_iexp]

and eval_bexp (e0: BEXP): bool = case+ e0 of
  | BEXPcst b => b
  | BEXPneg (e) => ~eval_bexp (e)
  | BEXPconj (e1, e2) => if eval_bexp (e1) then eval_bexp (e2) else false
  | BEXPdisj (e1, e2) => if eval_bexp (e1) then true else eval_bexp (e2)
  | BEXPeq (e1, e2) => eval_iexp (e1) = eval_iexp (e2)
  | BEXPneq (e1, e2) => eval_iexp (e1) <> eval_iexp (e2)
  | BEXPlt (e1, e2) => eval_iexp (e1) < eval_iexp (e2)
  | BEXPlte (e1, e2) => eval_iexp (e1) <= eval_iexp (e2)
  | BEXPgt (e1, e2) => eval_iexp (e1) > eval_iexp (e2)
  | BEXPgte (e1, e2) => eval_iexp (e1) >= eval_iexp (e2)
// end of [eval_bexp]
]]></programlisting></informalexample>

</para><!--para-->

<para>The integer and boolean expressions used in this example are all
constant expressions containing no variables. Therefore, there is no need
for an environment to evaluate them. I will present a more advanced example
elsewhere to demonstrate how an evaluator for a simple call-by-value
functional programming language like the core of ATS can be implemented.
</para>

</sect1><!--id="example_evaluating_arithmetic_expressions"-->

</chapter><!--id="datatypes"-->

<!-- ****** ****** -->

<!-- end of [main.atxt] -->


