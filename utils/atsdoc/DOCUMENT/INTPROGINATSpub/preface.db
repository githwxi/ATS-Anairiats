<!--
The file is automatically generated by [atsdoc] from main.atxt.
-->
<!--
Time of Generation: Sun Dec 22 16:32:03 2013
-->
<preface>

<title>Preface</title>



<para><ulink url="http://www.ats-lang.org">ATS</ulink> is a statically
typed programming language that unifies implementation with formal
specification. Within ATS, there are two sublanguages: one for
specification and the other for implementation, and there is also a
theorem-proving subsystem for verifying whether an implementation indeed
implements according to its specification.  If I could associate only one
single word with ATS, I would choose the word
<emphasis>precision</emphasis>.  Programming in ATS is about being precise
and being able to effectively enforce precision. This point will be
demonstrated concretely and repeatedly in this book.
</para>

<para>In order to be precise in building software systems, we need to
specify what such a system is expected to accomplish. In the current day
and age, software specification, which is used in a rather loose sense
here, is often done in forms of varying degrees of formalism, ranging from
verbal discussions to pencil/paper drawings to diagrammatic depictions in
modeling languages such as UML to text descriptions in formal specification
languages such as VDM and Z. Often the main purpose of software
specification is to establish some mutual understanding among a team of
developers.  After the specification for a software system is done, either
formally or informally, we need to implement the specification in a
programming language.  In general, it is exceedingly difficult to be
reasonably certain whether an implementation actually meets its
specification. Even if the implementation coheres well with its
specification initially, it nearly inevitably diverges from the
specification as the software system evolves. The dreadful consequences of
such a divergence are all too familiar; the specification becomes less and
less reliable for understanding the behavior of the software system while
the implementation gradually turns into its own specification; for the
developers, it becomes increasingly difficult and risky to maintain and
extend the software system; for the users, it requires increased amount of
time and effort to learn and use the software system.
</para>

<para>Largely inspired by Martin-L&oe;f's constructive type theory, which was
originally developed for the purpose of establishing a foundation for
mathematics, I designed ATS in an attempt to combine specification and
implementation into a single programming language. There are a static
component (statics) and a dynamic component (dynamics) in ATS. Intuitively,
the statics and dynamics are each for handling types and programs,
respectively. In particular, specification is done in the statics. Given a
specification, how can we then effectively ensure that an implementation of
the specification (type) indeed implements according to the specification?
We request that the programmer who does the implementation also construct a
proof in the theorem-proving subsystem of ATS to demonstrate it.  This is a
style of program verification that puts the programmer at the center, and
thus we refer to it as a programmer-centric approach to program
verification.
</para>

<para>ATS is also a feature-rich programming language. It can support a
variety of programming paradigms, including functional programming,
imperative programming, object-oriented programming, concurrent
programming, modular programming, etc. However, the core of ATS, which is
based on a call-by-value functional language, is surprisingly simple, and
this is where the journey of programming in ATS starts. In this book, I
will demonstrate primarily through examples how various programming
features in ATS can be employed effectively to facilitate the construction
of high-quality programs. I will focus on programming practice instead of
programming theory.  If you are primarily interested in the type-theoretical
foundation of ATS, then you have to find it elsewhere.
</para><!--para-->

<para>If you can implement, then you are a good programmer.  In order to
be a better programmer, you should also be able to explain what you
implement.  If you can guarantee what is implemented matches what is
specified, then you are surely the best programmer.  Hopefully, learning
ATS will put you on a wonderful exploring journey to become the best
programmer. Let that journey start now!
</para>

</preface>

<!-- end of [main.atxt] -->



