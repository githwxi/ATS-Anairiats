<!--
The file is automatically generated by [atsdoc] from main.atxt.
-->
<!--
Time of Generation: Thu Jan 29 10:17:08 2015
-->
<chapter id="preparation_for_starting">
<title>Preparation for Starting</title>

<para>It is most likely that you want to write programs in the programming
language you are learning.  You may also want to try some of the examples
included in this book and see what really happens. So I will first show you
how to write in ATS a single-file program, that is, a program contained in
a single file, and compile it and then execute it.
</para>

<sect1 id="a_running_program">
<title>A Running Program</title>

<para>The following example is a program in ATS that prints out (onto the
console) the string "Hello, world!" and a newline before it terminates:

<informalexample><programlisting><![CDATA[val _void_ = print ("Hello, world!\n")
implement main () = () // a dummy implementation for [main]
]]></programlisting></informalexample>


The keyword <code>val</code> initiates a binding between the variable
<code>_void_</code> and the function call <code>print ("Hello, world!\n")</code>.
However, this binding is never used after it is introduced; its sole purpose is
for the call to the <code>print</code> function to get evaluated.
</para><!--para-->

<para>The function <code>main</code> is of certain special meaning in ATS,
which I will explain elsewhere. For a programmer who knows the C or Java
programming language, I simply point out that the role of <code>main</code>
is essentially the same as its counterpart of the same name in C or Java.
The keyword <code>implement</code> initiates the implementation of a
function whose interface has already been declared elsewhere. The declared
interface for <code>main</code> in ATS is given as follows:

<informalexample><programlisting><![CDATA[fun main (): void
]]></programlisting></informalexample>


which indicates that <code>main</code> is a nullary function, that is, a
function that takes no arguments, and it returns no value (or it returns
the void value). The double slash symbol (<code>//</code>) initiates a
comment that terminates at the end of the current line.
</para><!--para-->

<para>Suppose that you have already installed the ATS programming language
system. You can issue the following command-line to generate an executable
named <filename>hello</filename> in the current working directory:

<informalexample><programlisting>
<command>atscc</command> -o hello hello.dats
</programlisting></informalexample>

where <filename>hello.dats</filename> is a file containing the above program.
Note that the filename extension <emphasis>.dats</emphasis> should not be
altered as it has already been assigned a special meaning that the
compilation command <command>atscc</command> recognizes. Another special
filename extension is <emphasis>.sats</emphasis>, which we will encounter
elsewhere.
</para><!--para-->

</sect1><!--id="a_running_example"-->

<!-- ****** ****** -->

<sect1 id="a_template_for_single-file_programs">

<title>A Template for Single-File Programs</title>

<para>
The following code template, which is available
<ulink url="http://www.ats-lang.org/DOCUMENT/INTPROGINATS/CODE/CHAPTER_START/mytest.dats">on-line</ulink>, is designed for constructing a
single-file program in ATS:

<informalexample><programlisting><![CDATA[(*
**
** This is a template for a single-file ATS program
**
*)

(* ****** ****** *)

(*
** please do not change unless you know what you do
*)
//
staload _(*anon*) = "libc/SATS/stdio.sats"
//
staload _(*anon*) = "prelude/DATS/array.dats"
staload _(*anon*) = "prelude/DATS/array0.dats"
//
staload _(*anon*) = "prelude/DATS/list.dats"
staload _(*anon*) = "prelude/DATS/list0.dats"
staload _(*anon*) = "prelude/DATS/list_vt.dats"
//
staload _(*anon*) = "prelude/DATS/matrix.dats"
staload _(*anon*) = "prelude/DATS/matrix0.dats"
//
staload _(*anon*) = "prelude/DATS/option.dats"
staload _(*anon*) = "prelude/DATS/option0.dats"
//
staload _(*anon*) = "prelude/DATS/pointer.dats"
//
staload _(*anon*) = "prelude/DATS/reference.dats"
//
(* ****** ****** *)

//
// please write you program in this section
//

(* ****** ****** *)

implement main () = () // a dummy implementation for [main]
]]></programlisting></informalexample>
<!--atscode-->

Each line starting with the keyword <code>staload</code> essentially allows
the ATS compiler <command>atsopt</command> to gain access to the definition
of certain library functions. I will cover elsewhere in the book the topic
on programming with library functions in ATS.
</para><!--para-->

</sect1><!--id="a_template_for_single-file programs"-->

<!-- ****** ****** -->

<sect1 id="a_makefile_template">
<title>A Makefile Template</title>

<para>
The following Makefile template, which is available
<ulink url="http://www.ats-lang.org/DOCUMENT/INTPROGINATS/CODE/CHAPTER_START/Makefile_template">on-line</ulink>, is provided to
help you construct your own Makefile for compiling ATS programs. If you are
not familiar with the <command>make</command> utility, you could readily find
plenty resources on-line to help yourself learn it.

<informalexample><programlisting><![CDATA[##
##
## A Makefile template for compiling ATS programs
##
##

######

ATSUSRQ="$(ATSHOME)"
ifeq ($(ATSUSRQ),"")
ATSUSRQ="/usr"
endif # end of [ifeq]

######

ATSCC=$(ATSUSRQ)/bin/atscc
ATSOPT=$(ATSUSRQ)/bin/atsopt

######

#
# Please uncomment the one you want, or skip it entirely
#
ATSCCFLAGS=
#ATSCCFLAGS=-O2
#
# [-flto] enables link-time optimization such as inlining lib functions
#
#ATSCCFLAGS=-O2 -flto

######

#
# HX: Please uncomment it if you need to run GC at run-time
#
ATSGCFLAG=
#ATSGCFLAG=-D_ATS_GCATS

######

distclean::

######

#
# Please uncomment the following three lines and replace the name [foo]
# with the name of the file you want to compile
#

# foo: foo.dats
# 	$(ATSCC) $(ATSGCFLAG) $(ATSCCFLAGS) -o $@ $< || touch $@
# distclean:: ; $(RMF) foo

######

#
# You may find these rules useful
#

# %_sats.o: %.sats
# 	$(ATSCC) $(ATSCCFLAGS) -c $< || touch $@

# %_dats.o: %.dats
# 	$(ATSCC) $(ATSCCFLAGS) -c $< || touch $@

######

RMF=rm -f

######

clean:
	$(RMF) *~
	$(RMF) *_?ats.o
	$(RMF) *_?ats.c

distclean:: clean

###### end of [Makefile] ######
]]></programlisting></informalexample>
<!--atscode-->
</para><!--para-->

</sect1><!--id="a_makefile_template"-->

</chapter><!--"preparation_for_starting"-->

<!-- ****** ****** -->

<!-- end of [main.atxt] -->


