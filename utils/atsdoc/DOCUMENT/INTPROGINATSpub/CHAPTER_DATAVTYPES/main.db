<!--
The file is automatically generated by [atsdoc] from main.atxt.
-->
<!--
Time of Generation: Thu Jan 29 10:17:15 2015
-->
<chapter id="dataviewtypes">
<title>Dataviewtypes as Linear Datatypes</title>

<para>
A dataviewtype can be thought of as a linear version of datatype. To a
large extent, it is a combination of a datatype and a dataview. This
programming feature is primarily introduced into ATS for the purpose of
providing in the setting of manual memory management the kind of
convenience brought by pattern matching. In a situation where GC must be
reduced or even completely eliminated, dataviewtypes can often be chosen as
a replacement for datatypes.  I now present in this chapter some commonly
encountered dataviewtypes and their uses.

</para>

<sect1
id="linear_optional_values">
<title>Linear Optional Values</title>

<para>
When an optional value is created, it is most likely to be used immediately
and then discarded. If such a value is assigned a linear type, then the
memory allocated for storing it can be efficiently reclaimed.  The
dataviewtype <code>option_vt</code> for linear optional values is declared as
follows:

<informalexample><programlisting><![CDATA[dataviewtype
option_vt (a:t@ype+, bool) =
  | Some_vt (a, true) of a | None_vt (a, false) of ()
// end of [option_vt]

viewtypedef
Option_vt (a:t@ype) = [b:bool] option_vt (a, b)
]]></programlisting></informalexample>


</para>

<para>
By the declaration, the dataviewtype <code>option_vt</code> is covariant in its
first argument and there are two data constructors <code>Some_vt</code> and
<code>None_vt</code> associated with it. In the following example,
<code>find_rightmost</code> tries to find the rightmost element in a list that
satisfies a given predicate:

<informalexample><programlisting><![CDATA[fun{a:t@ype}
find_rightmost {n:nat} .<n>.
  (xs: list (a, n), P: (a) -<cloref> bool): Option_vt (a) =
  case+ xs of
  | list_cons (x, xs) => let
      val opt = find_rightmost (xs, P)
    in
      case opt of
      | ~None_vt () => if P (x) then Some_vt (x) else None_vt ()
      | _ => opt
    end // end of [list_cons]
  | list_nil () => None_vt ()
// end of [find_rightmost]
]]></programlisting></informalexample>


Note that the tilde symbol (<code>~</code>) in front of the pattern
<code>None_vt()</code> indicates that the memory for the node that matches the
pattern is freed before the body of the matched clause is evaluated.  In
this case, no memory is actually freed as <code>None_vt</code> is mapped to the
null pointer.  I will soon give more detailed explanation about freeing
memory allocated for constructors associated with dataviewtypes.

</para>

<para>
As another example, the following function template <code>list_optcons</code>
tries to construct a new list with its head element extracted from a given
optional value:

<informalexample><programlisting><![CDATA[fn{a:t@ype}
list_optcons {b:bool} {n:nat} (
  opt: option_vt (a, b), xs: list (a, n)
) : list (a, n+int_of_bool(b)) =
  case+ opt of
  | ~Some_vt (x) => list_cons (x, xs) | ~None_vt () => xs
// end of [list_optcons]
]]></programlisting></informalexample>


The symbol <code>int_of_bool</code> stands for a built-in static function in
ATS that maps <code>true</code> and <code>false</code> to 1 and 0,
respectively. What is special here is that the first argument of
<code>list_optcons</code>, which is linear, is consumed after a call to
<code>list_optcons</code> returns and the memory it occupies is reclaimed.

</para>

</sect1><!--sect1/id=linear_optional_values-->

<sect1 id="linear_lists">
<title>Linear Lists</title>

<para>
A linear list is essentially the same as a singly-linked list depicted by
the dataview <code>sllst_v</code>. However, memory allocation and deallocation
of list nodes that were not handled previously are handled this time.  The
following declaration introduces a dataviewtype <code>list_vt</code>, which
forms a boxed type (of the sort <code>viewtype</code>) when applied to a type
and an integer:

<informalexample><programlisting><![CDATA[dataviewtype
list_vt (a:t@ype+, int) =
  | {n:nat}
    list_vt_cons (a, n+1) of (a, list_vt (a, n))
  | list_vt_nil (a, 0) of ()
// end of [list_vt]
]]></programlisting></informalexample>


Assume that a data constructor named <emphasis>foo</emphasis> is associated with a
dataviewtype.  Then there is a viewtype construtor of the name
<emphasis>foo_unfold</emphasis> that takes n addresses to form a viewtype, where n is
the arity of <emphasis>foo</emphasis>. For instance, there is a viewtype constructor
<code>list_vt_cons_unfold</code> that takes two address L0 and L1 to form a
viewtype <code>list_vt_cons_unfold</code>(L0, L1). This viewtype is for a list
node created by a call to <code>list_vt_cons</code> such that the two arguments
of <code>list_vt_cons</code> are located at L0 and L1 while the proofs for the
at-views associated with L0 and L1 are put in the store for currently
available proofs.

</para>

<para>
Given a type T and an integer I, the viewtype <code>list_vt</code>(T, I) is for
linear lists of length I in which each element is assigned the type T.  The
following function template <code>length</code> computes the length of a given
linear list:

<informalexample><programlisting><![CDATA[fn{a:t@ype}
length {n:nat}
  (xs: !list_vt (a, n)): int n = let
  fun loop
    {i,j:nat | i+j==n} .<i>.
    (xs: !list_vt (a, i), j: int j): int (n) =
    case+ xs of
    | list_vt_cons (_, !p_xs1) => let
        val n = loop (!p_xs1, j+1); val () = fold@ (xs) in n
      end // end of [list_vt_cons]
    | list_vt_nil () => (fold@ (xs); j)
  // end of [loop]
in
  loop (xs, 0)
end // end of [length]
]]></programlisting></informalexample>


The interface of <code>length</code> indicates that <code>length</code>&lt;T&gt;
returns an integer equal to I when applied to a list of the type
<code>list_vt</code>(T, I), where T and I are a type and an integer,
respectively. Note that the symbol <code>!</code> in front of the type of a
function argument indicates that the argument is call-by-value and it is
preserved after a call to the function.

</para>

<para>
What is particularly interesting here is the way in which pattern matching
on a value of a dataviewtype works. In the body of the inner function
<code>loop</code>, the type of <code>xs</code> changes to
<code>list_vt_cons_unfold</code>(L1, L2) for some addresses L1 and L2 when it
matches the pattern <code>list_vt_cons(_, !p_xs1)</code>, and <code>p_xs1</code> is
bound to a value of the type <code>ptr</code>(L2), and a proof of the at-view
<code>a</code>@L1 and another proof of the at-view <code>list_vt(a,n-1)</code>@L2
are automatically put into the store for the currently availble
proofs. Note that the symbol <code>!</code> in front of the variable
<code>p_xs1</code> indicates that <code>p_xs1</code> is bound to the pointer to the
tail of the list referred to by <code>xs1</code> (rather than the tail itself).
In order to change the type of <code>xs</code> back to the type
<code>list_vt(a, n)</code>, we can apply <code>fold@</code> to <code>xs</code> and this
application implicitly consumes a proof of the at-view <code>a</code>@L1 and
another proof of the at-view <code>list_vt(a, n-1)</code>@L2. Note that
<code>fold@</code> is a keyword in ATS, and an application of <code>fold@</code> is
treated as a proof and it is erased after typechecking.

</para>

<para>
In the case where <code>xs</code> matches the pattern <code>list_vt_nil()</code>,
the type of <code>xs</code> changes into <code>list_vt_nil()</code> while there is
no proof added to the store for the currently available proofs, and the
type of <code>xs</code> restores to <code>list_vt(a, 0)</code> when
<code>fold@</code> is applied to it.

</para>

<para>
Let us now see an example involving a linear list being freed manually:

</para>

<informalexample><programlisting><![CDATA[fun{a:t@ype}
list_vt_free
  {n:nat} .<n>. (xs: list_vt (a, n)): void =
  case+ xs of
  | ~list_vt_cons (x, xs1) => list_vt_free (xs1) // [x] can be replaced with [_]
  | ~list_vt_nil () => ()
// end of [list_vt_free]
]]></programlisting></informalexample>


<para>
In the case where <code>xs</code> matches the pattern <code>list_vt_cons(x,
xs1)</code>, the names <code>x</code> and <code>xs1</code> are bound to the head and the
tail of the list referred to by <code>xs</code>, respectively, and the type of
<code>xs</code> changes to <code>list_vt_cons</code>(L1, L2) for some addresses
while a proof of the at-view <code>a</code>@L1 and another proof of the at-view
<code>list_vt(a, n-1)?!</code>@L2 are put into the store for currently
available proofs. Note that the symbol <code>?!</code> indicates that the tail
of the list, which is linear, is already taken out (as it is now referred
by <code>xs1</code>).  The special symbol <code>~</code> in front of the pattern
<code>list_vt_cons(x, xs1)</code> indicates that the list node referred to
by <code>xs</code> after <code>xs</code> matches the pattern is freed immediately.

</para>

<para>
It is also possible to use the special function <code>free@</code> to
explicitly free a node (also called a skeleton) left in a linear variable
after the variable matches a pattern formed with a constructor associated
with some dataviewtype. For instance, the following code gives another
implementation of <code>list_vt_free</code>:

</para>

<informalexample><programlisting><![CDATA[fun{a:t@ype}
list_vt_free
  {n:nat} .<n>. (xs: list_vt (a, n)): void =
  case+ xs of
  | list_vt_cons (x, xs1) => (free@ {a}{0} (xs); list_vt_free (xs1))
  | list_vt_nil () => free@ {a} (xs)
// end of [list_vt_free]
]]></programlisting></informalexample>


<para>
As using <code>free@</code> is a bit tricky in practice, I present more details
as follows. First, let us note that the constructors <code>list_vt_nil</code>
and <code>list_vt_cons</code> associated with <code>list_vt</code> are assigned the
following types:

</para>

<informalexample><programlisting><![CDATA[list_vt_nil : // one quantifier
  {a:t@ype} () -> list_vt (a, 0)
list_vt_cons : // two quantifiers
  {a:t@ype} {n:nat} (a, list_vt (a, n)) -> list_vt (a, n+1)
]]></programlisting></informalexample>


<para>
If <code>free@</code> is applied to a node of the type <code>list_vt_nil</code>(),
it needs one static argument, which is a type, to instantiate the
quantifier in the type of the constructor <code>list_vt_nil</code>. If
<code>free@</code> is applied to a node of the type
<code>list_vt_cons_unfold</code>(L1, L2), then it needs two static arguments,
which are a type and an integer, to instantiate the two quantifiers in the
type of the constructor <code>list_vt_cons</code>. In the case where the type
of <code>xs</code> is <code>list_vt_cons_unfold</code>(L1, L2), typechecking the
call <code>free@ {a}{0} (xs)</code> implicitly consumes a proof of the at-view
<code>a?</code>@L1 and another proof of the at-view <code>list_vt(a, 0)?</code>@L2.
As there is no difference between <code>list_vt</code>(T, 0)? and
<code>list_vt</code>(T, I)? for any T and I, the static argument 0 is supplied
here. As a matter of fact, any natural number can be used in place of 0 as
the second static argument of <code>free@</code>.

</para>

<para>
The next example I present is a function template that turns a linear list into
its reverse:

<informalexample><programlisting><![CDATA[fn{a:t@ype}
reverse {n:nat}
  (xs: list_vt (a, n)): list_vt (a, n) = let
  fun revapp
    {i,j:nat | i+j==n} .<i>.
    (xs: list_vt (a, i), ys: list_vt (a, j)): list_vt (a, n) =
    case+ xs of
    | list_vt_cons (_, !p_xs1) => let
        val xs1 = !p_xs1; val () = !p_xs1 := ys; val () = fold@ (xs)
      in
        revapp (xs1, xs)
      end // end of [list_vt_cons]
    | ~list_vt_nil () => ys
  // end of [revapp]
in
  revapp (xs, list_vt_nil)
end // end of [reverse]
]]></programlisting></informalexample>


This implementation of list reversal directly corresponds to the one
presented previously that is based the dataview <code>slseg_v</code> (for
singly-linked list segments). Comparing the two implementations, we can see
that the above one is significantly simplified at the level of types. For
instance, there is no explicit mentioning of pointers in the types assigned
to <code>reverse</code> and <code>revapp</code>.

</para>

<para>
The following implementation of list append makes use of the feature
of call-by-reference:

<informalexample><programlisting><![CDATA[fn{a:t@ype}
append {m,n:nat} (
  xs: list_vt (a, m), ys: list_vt (a, n)
) : list_vt (a, m+n) = let
  fun loop {m,n:nat} .<m>. // [loop] is tail-recursive
    (xs: &list_vt (a, m) >> list_vt (a, m+n), ys: list_vt (a, n)): void =
    case+ xs of
    | list_vt_cons (_, !p_xs1) => let
        val () = loop (!p_xs1, ys) in fold@ (xs)
      end // end of [list_vt_cons]
    | ~list_vt_nil () => xs := ys // [xs] is a left-value
  // end of [loop]
  var xs: List_vt (a) = xs // creating a left-value for [xs]
  val () = loop (xs, ys)
in
  xs
end // end of [append]
]]></programlisting></informalexample>


As the call <code>fold@(xs)</code> in the body of the function <code>loop</code> is
erased after typechecking, <code>loop</code> is a tail-recursive function.
Therefore, <code>append</code> can be called on lists of any length without the
concern of possible stack overflow. The type for the first argument of
<code>loop</code> begins with the symbol <code>&amp;</code>, which indicates that
this argument is call-by-reference. The type of <code>loop</code> simply means
that its first argument is changed from a list of length m into a list of
length m+n while its second argument is consumed.

Again, this implementation of list append essentially corresponds to the
one presented previously that is based on the dataview <code>slseg_v</code>.
Comparing these two, we can easily see that the above one is much simpler
and cleaner, demonstrating concretely some advantage of dataviewtypes over
dataviews.

</para>

<para>
Lastly in this section, I mention a closely related issue involving
(functional) list construction and tail-recursion. Following is a typical
implementation of functioal list concatenation:

<informalexample><programlisting><![CDATA[fun{a:t@ype}
append1 {m,n:nat}
  (xs: list (a, m), ys: list (a, n)): list (a, m+n) =
  case+ xs of
  | list_cons (x, xs) => list_cons (x, append1 (xs, ys))
  | list_nil () => ys
// end of [append1]
]]></programlisting></informalexample>


Clearly, <code>append1</code> is not tail-recursive, which means that it may
cause stack overflow at run-time if its first argument is very long (e.g.,
containing 1 million elements). There is, however, a direct and type-safe
way in ATS to implement functional list concatenation in a tail-recursive
manner, thus eliminating the concern of potential stack overflow. For
instance, the following implementation of <code>append2</code> returns the
concatenation of two given lists while being tail-recursive:

<informalexample><programlisting><![CDATA[fun{a:t@ype}
append2 {m,n:nat} (
  xs: list (a, m)
, ys: list (a, n)
) : list (a, m+n) = let
  fun loop
    {m,n:nat} .<m>. (
    xs: list (a, m)
  , ys: list (a, n)
  , res: &(List a)? >> list (a, m+n)
  ) :<> void = begin case+ xs of
    | list_cons (x, xs) => let
        val () = (
          res := list_cons {a}{0} (x, ?) // a partially initialized list
        ) // end of [val]
        val+ list_cons (_, !p) = res // [p] points to the tail of the list
        val () = loop (xs, ys, !p)
      in
        fold@ res // this is a no-op at run-time
      end // end of [list_cons]
    | list_nil () => (res := ys)
  end // end of [loop]
  var res: List a // uninitialized variable
  val () = loop (xs, ys, res)
in
  res
end // end of [append2]
]]></programlisting></informalexample>


During typechecking, the expression <code>list_cons {a}{0} (x, ?)</code>, is
assigned the (linear) type <code>list_cons</code>(L1, L2) for some addresses L1
and L2 while a proof of the at-view <code>a</code>@L1 and another proof of the
at-view <code>list(a, 0)?</code>@L2 are put into the store for the currently
available proofs. Note that the special symbol <code>?</code> here simply
indicates that the tail of the newly constructed list is uninitialized. A
partially initialized list of the type <code>list_cons</code>(L1, L2) is
guaranteed to match the pattern <code>list_cons(_, !p)</code>, yielding a
bindng between <code>p</code> and the (possibly uninitialized) tail of the
list. When <code>fold@</code> is called on a variable of the type
<code>list_cons</code>(L1, L2), it changes the type of the variable to
<code>list</code>(T, N+1) by consuming a proof of the view T@L1 and another
proof of the view <code>list</code>(T, N), where T and N are a type and an
integer, respectively.

</para>

<para>
In summary, dataviewtypes can largely retain the convenience of pattern
matching associated with datatypes while requiring no GC support at
run-time.  Compared to dataviews, dataviewtypes are less general. However,
if a dataviewtype can be employed to solve a problem, then the solution is
often significantly simpler and cleaner than an alternative dataview-based
one.

</para>

</sect1><!--sect1/id=linear_lists-->

<!-- ****** ****** -->

<sect1
id="example_mergesort_lin">
<title>Example: Mergesort on Linear Lists</title>

<para>
When mergesort is employed to sort an array of elements, it requires
additional memory proportionate to the size of the array in order to move
the elements around, which is considered a significant weakness of
mergesort. However, mergesort does not have this requirement when it
operates on a linear list.  I present as follows an implementation of
mergesort on linear lists that can readily rival its counterpart in C in
terms of time-efficiency as well as memory-efficiency. The invariants
captured in this implementation and the easiness to capture them should
provide strong evidence to ATS being a programming language
capable of enforcing great precision in practical programming.

</para>

<para>
First, let us introduce a type definition and an interface for a function
template (for comparing elements in a list to be sorted):

</para>

<informalexample><programlisting><![CDATA[typedef cmp (a:t@ype) = (&a, &a) -> int

extern
fun{a:t@ype} compare (x: &a, y: &a, cmp: cmp (a)): int
]]></programlisting></informalexample>


<para>
The interface for mergesort is given as follows:

</para>

<informalexample><programlisting><![CDATA[extern
fun{a:t@ype}
mergesort {n:nat}
  (xs: list_vt (a, n), cmp: cmp a): list_vt (a, n)
// end of [mergesort]
]]></programlisting></informalexample>


<para>
The first argument of <code>mergesort</code> is a linear list (to be sorted)
and the second one a function for comparing the elements in the linear
list.  Clearly, the interface of <code>mergesort</code> indicates that
<code>mergesort</code> consumes its first argument and then returns a linear
list that is of same length as its first argument. As is to become clear,
the returned linear list is constructed with the nodes of the consumed
one. In particular, the implementation of mergesort given here does not
involve any memory allocation or deallocation.

</para>

<para>
The function template for merging two sorted lists into one is given as follows:
</para>

<informalexample><programlisting><![CDATA[fun{a:t@ype}
merge // tail-rec
  {m,n:nat} .<m+n>. (
  xs: list_vt (a, m)
, ys: list_vt (a, n)
, res: &List_vt(a)? >> list_vt (a, m+n)
, cmp: cmp a
) : void =
  case+ xs of
  | list_vt_cons (!p_x, !p_xs1) => (
    case+ ys of
    | list_vt_cons (!p_y, !p_ys1) => let
        val sgn = compare<a> (!p_x, !p_y, cmp)
      in
        if sgn <= 0 then let // stable sorting
          val () = res := xs
          val xs1 = !p_xs1
          val () = fold@ (ys)
          val () = merge (xs1, ys, !p_xs1, cmp)
        in
          fold@ (res)
        end else let
          val () = res := ys
          val ys1 = !p_ys1
          val () = fold@ (xs)
          val () = merge (xs, ys1, !p_ys1, cmp)
        in
          fold@ (res)
        end // end of [if]
      end (* end of [list_vt_cons] *)
    | ~list_vt_nil () => (fold@ (xs); res := xs)
    ) // end of [list_vt_cons]
  | ~list_vt_nil () => (res := ys)
// end of [merge]
]]></programlisting></informalexample>


<para>
Unlike the one given in a previous functional implementation, this
implementation of <code>merge</code> is tail-recursive and thus is guaranteed
to be translated into a loop in C by the ATS compiler. This means that the
concern of <code>merge</code> being unable to handle very long lists (e.g.,
containing 1 million elements) due to potential stack overflow is
eliminated.

</para>

<para>
The next function template is for splitting a given linear lists into two:

</para>

<informalexample><programlisting><![CDATA[fun{a:t@ype}
split {n,k:nat | k <= n} .<n-k>. (
  xs: &list_vt (a, n) >> list_vt (a, n-k), nk: int (n-k)
) : list_vt (a, k) =
  if nk > 0 then let
    val+ list_vt_cons (_, !p_xs1) = xs
    val res = split (!p_xs1, nk-1); val () = fold@ (xs)
  in
    res
  end else let
    val res = xs; val () = xs := list_vt_nil () in res
  end // end of [if]
// end of [split]
]]></programlisting></informalexample>


<para>
Note that the implementation of <code>split</code> is also tail-recursive.

</para>

<para>
The following function template <code>msort</code> takes a linear list, its
length and a comparsion function, and it returns a sorted version of the
given linear list:

</para>

<informalexample><programlisting><![CDATA[fun{a:t@ype}
msort {n:nat} .<n>. (
  xs: list_vt (a, n), n: int n, cmp: cmp(a)
) : list_vt (a, n) =
  if n >= 2 then let
    val n2 = n / 2
    val n3 = n - n2
    var xs = xs // a left-value for [xs]
    val ys = split {n,n/2} (xs(*cbr*), n3) // xs: call-by-ref
    val xs = msort (xs, n3, cmp)
    val ys = msort (ys, n2, cmp)
    var res: List_vt (a)
    val () = merge (xs, ys, res(*cbr*), cmp) // xs: call-by-ref
  in
    res
  end else xs
// end of [msort]
]]></programlisting></informalexample>


<para>
The second argument of <code>msort</code> is passed so that the length of the
list being sorted does not have to be computed directly by traversing the
list when each recursive call to <code>msort</code> is made.

</para>

<para>
Finally, <code>mergesort</code> can be implemented with a call to
<code>msort</code>:

</para>

<informalexample><programlisting><![CDATA[implement{a}
mergesort (xs, cmp) = msort (xs, length (xs), cmp)
]]></programlisting></informalexample>


<para>
Please find the entire code in this section plus some additional
code for testing <ulink url="http://www.ats-lang.org/DOCUMENT/INTPROGINATS/CODE/CHAPTER_DATAVTYPES/mergesort.dats">on-line</ulink>.

</para>

</sect1><!--sect1/id=example_mergesort_lin-->

<!-- ****** ****** -->

<sect1
id="linear_binary_search_trees">
<title>Linear Binary Search Trees</title>

<para>
A binary search tree with respect to a given ordering is a binary tree such
that the value stored in each node inside the tree is greater than or equal
to those stored in the left child of the node and less than or equal to
those stored in the right child of the node.  Binary search trees are a
common data structure for implementing finite maps.

</para>

<para>
A family of binary
trees are said to be balanced if there is a fixed constant C (for the
entire family) such that the ratio between the length of a longest path and
the length of a shortest path is bounded by C for every tree in the
family. For instance, common examples of balanced binary trees include AVL
trees and red-black trees. Finite maps based on balanced binary search
trees support guaranteed log-time insertion and deletion operations, that
is, the time to complete such an operation is O(log(n)) in the worst case,
where n is the size of the map.

</para>

<para>
In this section, I am to implement several basic operations on linear
binary search trees, further illustrating some use of dataviewtypes. Let us
first declare as follows a dataviewtype <code>bstree_vt</code> for linear
binary (search) trees:

<informalexample><programlisting><![CDATA[dataviewtype
bstree_vt
  (a:t@ype+, int) =
  | {n1,n2:nat}
    bstree_vt_cons (a, 1+n1+n2) of
      (bstree_vt (a, n1), a, bstree_vt (a, n2))
  | bstree_vt_nil (a, 0) of ()
// end of [bstree_vt]
]]></programlisting></informalexample>


</para>

<para>
Note that the integer index of <code>bstree_vt</code> captures the size
information of a binary (search) tree.  There are two constructors
<code>bstree_vt_cons</code> and <code>bstree_vt_nil</code> associated with
<code>bstree_vt</code>. It should be pointed out that the tree created by
<code>bstree_vt_nil</code> is empty and thus not a leaf, which on the other
hand is a node whose left and right children are both empty.  As a simple
example, the following function template <code>size</code> computes the size of
a given tree:

<informalexample><programlisting><![CDATA[fun{a:t@ype}
size {n:nat} .<n>. (
  t: !bstree_vt (a, n)
) : int (n) =
  case+ t of
  | bstree_vt_cons (!p_tl, _, !p_tr) => let
      val n = 1 + size (!p_tl) + size (!p_tr) in fold@ (t); n
    end // end of [bstree_vt_cons]
  | bstree_vt_nil () => (fold@ (t); 0)
// end of [size]
]]></programlisting></informalexample>


</para>

<para>
Assume that we have a binary search tree with repect to some ordering.  If
a predicate P on the elements stored in the tree possesses the property
that P(x1) implies P(x2) whenever x1 is less than x2 (according to the
ordering), then we can locate the least element in the tree that satisfies
the predicate P by employing so-called binary search as is demonstrated in
the following implementation of <code>search</code>:

<informalexample><programlisting><![CDATA[fun{a:t@ype}
search {n:nat} .<n>. (
  t: !bstree_vt (a, n), P: (&a) -<cloref> bool
) : Option_vt (a) =
  case+ t of
  | bstree_vt_cons
      (!p_tl, !p_x, !p_tr) =>
      if P (!p_x) then let
        val res = search (!p_tl, P)
        val res = (
          case+ res of
          | ~None_vt () => Some_vt (!p_x) | _ => res
        ) : Option_vt (a)
      in
        fold@ (t); res
      end else let
        val res = search (!p_tr, P) in fold@ (t); res
      end // end of [if]
  | bstree_vt_nil () => (fold@ (t); None_vt ())
// end of [search]
]]></programlisting></informalexample>


Clearly, if the argument <code>t</code> of <code>search</code> ranges over a family
of balanced trees, then the time-complexity of <code>search</code> is O(log(n))
(assuming that <code>P</code> is O(1)).

</para>

<para>
Let us next see an operation that inserts a given element into a binary
search tree:

<informalexample><programlisting><![CDATA[fun{a:t@ype}
insert {n:nat} .<n>. (
  t: bstree_vt (a, n), x0: &a, cmp: cmp(a)
) : bstree_vt (a, n+1) =
  case+ t of
  | bstree_vt_cons
      (!p_tl, !p_x, !p_tr) => let
      val sgn = compare<a> (x0, !p_x, cmp)
    in
      if sgn <= 0 then let
        val () = !p_tl := insert (!p_tl, x0, cmp)
      in
        fold@ (t); t
      end else let
        val () = !p_tr := insert (!p_tr, x0, cmp)
      in
        fold@ (t); t
      end (* end of [if] *)
    end // end of [bstree_vt_cons]
  | ~bstree_vt_nil () =>
      bstree_vt_cons (bstree_vt_nil, x0, bstree_vt_nil)
    // end of [bstree_vt_nil]
// end of [insert]
]]></programlisting></informalexample>


</para>

<para>
When inserting an element, the function template <code>insert</code> extends
the given tree with a new leaf node containing the element, and this form
of insertion is often referred to as leaf-insertion.  There is another form
of insertion often referred to as root-insertion, which always puts at the
root position the new node containing the inserted element. The following
function template <code>insertRT</code> is implemented to perform a standard
root-insertion operation:

<informalexample><programlisting><![CDATA[fun{a:t@ype}
insertRT {n:nat} .<n>. (
  t: bstree_vt (a, n), x0: &a, cmp: cmp(a)
) : bstree_vt (a, n+1) =
  case+ t of
  | bstree_vt_cons
      (!p_tl, !p_x, !p_tr) => let
      val sgn = compare<a> (x0, !p_x, cmp)
    in
      if sgn <= 0 then let
        val tl = insertRT (!p_tl, x0, cmp)
        val+ bstree_vt_cons (_, !p_tll, !p_tlr) = tl
        val () = !p_tl := !p_tlr
        val () = fold@ (t)
        val () = !p_tlr := t
      in
        fold@ (tl); tl
      end else let
        val tr = insertRT (!p_tr, x0, cmp)
        val+ bstree_vt_cons (!p_trl, _, !p_trr) = tr
        val () = !p_tr := !p_trl
        val () = fold@ (t)
        val () = !p_trl := t
      in
        fold@ (tr); tr
      end
    end // end of [bstree_vt_cons]
  | ~bstree_vt_nil () =>
      bstree_vt_cons (bstree_vt_nil, x0, bstree_vt_nil)
    // end of [bstree_vt_nil]
// end of [insertRT]
]]></programlisting></informalexample>


The code immediately following the first recursive call to
<code>insertRT</code> performs a right tree rotation. Let us use T(tl, x, tr)
for a tree such that its root node contains the element x and its left and
right children are tl and tr, respectively. Then a right rotation turns
T(T(tll, xl, tlr), x, tr) into T(tll, xl, T(tlr, x, tr)).
The code immediately following the second recursive call to
<code>insertRT</code> performs a left tree rotation, which turns
T(tl, x, T(trl, xr, trr)) into T(T(tl, x, tlr), xr, trr).

</para>

<para>
To further illustrate tree rotations, I present as follows
two function templates <code>lrotate</code> and <code>rrotate</code>, which
implement the left and right tree rotations, respectively:

<informalexample><programlisting><![CDATA[fn{a:t@ype}
lrotate
  {nl,nr:nat | nr > 0}
  {l_tl,l_x,l_tr:addr} (
  pf_tl: bstree_vt (a, nl) @ l_tl
, pf_x: a @ l_x
, pf_tr: bstree_vt (a, nr) @ l_tr
| t: bstree_vt_cons_unfold (l_tl, l_x, l_tr)
, p_tl: ptr l_tl
, p_tr: ptr l_tr
) : bstree_vt (a, 1+nl+nr) = let
  val tr = !p_tr
  val+ bstree_vt_cons (!p_trl, _, !p_trr) = tr
  val () = !p_tr := !p_trl
  val () = fold@ (t)
  val () = !p_trl := t
in
  fold@ (tr); tr
end // end of [lrotate]

fn{a:t@ype}
rrotate
  {nl,nr:nat | nl > 0}
  {l_tl,l_x,l_tr:addr} (
  pf_tl: bstree_vt (a, nl) @ l_tl
, pf_x: a @ l_x
, pf_tr: bstree_vt (a, nr) @ l_tr
| t: bstree_vt_cons_unfold (l_tl, l_x, l_tr)
, p_tl: ptr l_tl
, p_tr: ptr l_tr
) : bstree_vt (a, 1+nl+nr) = let
  val tl = !p_tl
  val+ bstree_vt_cons (!p_tll, x, !p_tlr) = tl
  val () = !p_tl := !p_tlr
  val () = fold@ (t)
  val () = !p_tlr := t
in
  fold@ (tl); tl
end // end of [rrotate]
]]></programlisting></informalexample>


Given three addresses L0, L1 and L2, the type
<code>bstree_vt_cons_unfold</code>(L0, L1, l2) is for a tree node created
by a call to <code>bstree_vt_cons</code> such that the three arguments of
<code>bstree_vt_cons</code> are located at L0, L1 and L2, and the proofs for the
at-views associated with L0, L1 and L2 are put in the store for the currently
available proofs.

</para>

<para>
The function template <code>insertRT</code> for root-insertion can now be
implemented as follows by making direct use of <code>lrotate</code> and
<code>rrotate</code>:

<informalexample><programlisting><![CDATA[fun{a:t@ype}
insertRT {n:nat} .<n>. (
  t: bstree_vt (a, n), x0: &a, cmp: cmp(a)
) : bstree_vt (a, n+1) =
  case+ t of
  | bstree_vt_cons
      (!p_tl, !p_x, !p_tr) => let
      val sgn = compare<a> (x0, !p_x, cmp)
    in
      if sgn <= 0 then let
        val () = !p_tl := insertRT (!p_tl, x0, cmp)
      in
        rrotate (view@(!p_tl), view@(!p_x), view@(!p_tr) | t, p_tl, p_tr)
      end else let
        val () = !p_tr := insertRT (!p_tr, x0, cmp)
      in
        lrotate (view@(!p_tl), view@(!p_x), view@(!p_tr) | t, p_tl, p_tr)
      end
    end // end of [bstree_vt_cons]
  | ~bstree_vt_nil () =>
      bstree_vt_cons (bstree_vt_nil, x0, bstree_vt_nil)
    // end of [bstree_vt_nil]
// end of [insertRT]
]]></programlisting></informalexample>


</para>

<para>
I would like to point out that neither <code>insert</code> nor
<code>insertRT</code> is tail-recursive. While it is straightforward to give
the former a tail-recursive implementation, there is no direct way to do
the same to the latter. In order to implement root-insertion in a
tail-recursive manner, we are in need of binary search trees with parental
pointers (so as to allow each node to gain direct access to its parent),
which can be done with dataviews but not with dataviewtypes.

</para>

<para>
Please find the entire code in this section plus some additional
code for testing <ulink url="http://www.ats-lang.org/DOCUMENT/INTPROGINATS/CODE/CHAPTER_DATAVTYPES/bstree_vt.dats">on-line</ulink>.

</para>

</sect1><!--sect1/id=linear_binary_search_trees-->

<sect1
id="transition_from_datatypes_to_dataviewtypes">
<title>Transition from Datatypes to Dataviewtypes</title>

<para>
Many programmers are likely to find it a rather involved task to write code
manipulating values of dataviewtypes. When handling a complex data
structure, I myself often try to first use a datatype to model the data
structure and implement some functionalities of the data structure based
the datatype. I then change the datatype into a corresponding dataviewtype
and modify the implementation accordingly to make it work with the
dataviewtype. I now present as follows an implementation of linear
red-black trees that is directly based on a previous
<xref linkend="example_fun_red-black_trees"/>,
illustrating concretely a kind of gradual transition from datatypes to
dataviewtypes that can greatly reduce the level of difficulty one may
otherwise encounter in an attempt to program with dataviewtypes directly.

</para>

<para>
The following declaration of dataviewtype <code>rbtree</code> is identical to
the previous declaration of datatype <code>rbtree</code> except the keyword
<code>dataviewtype</code> being now used instead of the keyword <code>datatype</code>:

<informalexample><programlisting><![CDATA[#define BLK 0; #define RED 1
sortdef clr = {c:int | 0 <= c; c <= 1}

dataviewtype
rbtree (
  a: t@ype, int(*c*), int(*bh*), int(*v*)
) = // element type, color, black height, violations
  | rbtree_nil (a, BLK, 0, 0) of ()
  | {c,cl,cr:clr} {bh:nat} {v:int}
      {c==BLK && v==0 || c == RED && v==cl+cr}
    rbtree_cons (a, c, bh+1-c, v) of (
      int c, rbtree0 (a, cl, bh), a, rbtree0 (a, cr, bh)
    ) // end of [rbtree_cons]
// end of [rbtree]

where rbtree0 (a:t@ype, c:int, bh:int) = rbtree (a, c, bh, 0)
]]></programlisting></informalexample>


</para>

<para>
At the first sight, the following function template <code>insfix_l</code> is
greatly more involved that a previous version of the same name (for
manipulating functional red-black trees):

<informalexample><programlisting><![CDATA[fn{a:t@ype}
insfix_l // right rotation
  {cl,cr:clr}
  {bh:nat}
  {v:nat}
  {l_c,l_tl,l_x,l_tr:addr} (
  pf_c: int(BLK) @ l_c
, pf_tl: rbtree (a, cl, bh, v) @ l_tl
, pf_x: a @ l_x
, pf_tr: rbtree (a, cr, bh, 0) @ l_tr
| t: rbtree_cons_unfold (l_c, l_tl, l_x, l_tr)
, p_tl: ptr (l_tl)
) : [c:clr] rbtree0 (a, c, bh+1) = let
  #define B BLK
  #define R RED
  #define cons rbtree_cons
in
  case+ !p_tl of
  | cons (!p_cl as R, !p_tll as cons (!p_cll as R, _, _, _), _, !p_tlr) => let
//
      val () = !p_cll := B
      val () = fold@ (!p_tll)
//
      val tl = !p_tl
      val () = !p_tl := !p_tlr
      val () = fold@ (t)
//
      val () = !p_tlr := t
    in
      fold@ (tl); tl
    end // end of [cons (R, cons (R, ...), ...)]
  | cons (!p_cl as R, !p_tll, _, !p_tlr as cons (!p_clr as R, !p_tlrl, _, !p_tlrr)) => let
//
      val tl = !p_tl
      val () = !p_tl := !p_tlrr
      val () = fold@ (t)
      val () = !p_tlrr := t
//
      val tlr = !p_tlr
      val () = !p_tlr := !p_tlrl
      val () = !p_cl := B
      val () = fold@ (tl)
      val () = !p_tlrl := tl
//
    in
      fold@ (tlr); tlr
    end // end of [cons (R, ..., cons (R, ...))]
  | _ =>> (fold@ (t); t)
end // end of [insfix_l]
]]></programlisting></informalexample>


However, I would like to point out that the interface for the above
<code>insfix_l</code> is a <emphasis>direct</emphasis> translation of the interface for the
previous <code>infix_l</code>. In other words, the previously captured relation
between a tree being rotated and the one obtained from applying
<code>infix_l</code> to it also holds in the setting of linear red-black trees.
The very same statement can be made about the following function template
<code>insfix_r</code>, which is precisely a mirror image of <code>insfix_l</code>:

</para>

<informalexample><programlisting><![CDATA[fn{a:t@ype}
insfix_r // left rotation
  {cl,cr:clr}
  {bh:nat}
  {v:nat}
  {l_c,l_tl,l_x,l_tr:addr} (
  pf_c: int(BLK) @ l_c
, pf_tl: rbtree (a, cl, bh, 0) @ l_tl
, pf_x: a @ l_x
, pf_tr: rbtree (a, cr, bh, v) @ l_tr
| t: rbtree_cons_unfold (l_c, l_tl, l_x, l_tr)
, p_tr: ptr (l_tr)
) : [c:clr] rbtree0 (a, c, bh+1) = let
  #define B BLK
  #define R RED
  #define cons rbtree_cons
in
  case+ !p_tr of
  | cons (!p_cr as R, !p_trl, _, !p_trr as cons (!p_crr as R, _, _, _)) => let
//
      val () = !p_crr := B
      val () = fold@ (!p_trr)
//
      val tr = !p_tr
      val () = !p_tr := !p_trl
      val () = fold@ (t)
//
      val () = !p_trl := t
    in
      fold@ (tr); tr
    end // end of [cons (R, ..., cons (R, ...))]
  | cons (!p_cr as R, !p_trl as cons (!p_crr as R, !p_trll, _, !p_trlr), _, !p_trr) => let
//
      val tr = !p_tr
      val () = !p_tr := !p_trll
      val () = fold@ (t)
      val () = !p_trll := t
//
      val trl = !p_trl
      val () = !p_trl := !p_trlr
      val () = !p_cr := B
      val () = fold@ (tr)
      val () = !p_trlr := tr
//
    in
      fold@ (trl); trl
    end // end of [cons (R, cons (R, ...), ...)]
  | _ =>> (fold@ (t); t)
end // end of [insfix_r]
]]></programlisting></informalexample>


<para>
As can be expected,
the following function template <code>rbtree_insert</code> is essentially a
direct translation of the one of the same name for inserting an element
into a functional red-black tree:

<informalexample><programlisting><![CDATA[extern
fun{a:t@ype}
rbtree_insert
  {c:clr} {bh:nat} (
  t: rbtree0 (a, c, bh), x0: &a, cmp: cmp a
) : [bh1:nat] rbtree0 (a, BLK, bh1)

implement{a}
rbtree_insert
  (t, x0, cmp) = let
//
#define B BLK; #define R RED
#define nil rbtree_nil; #define cons rbtree_cons
//
fun ins
  {c:clr} {bh:nat} .<bh,c>. (
  t: rbtree0 (a, c, bh), x0: &a
) :<cloref1> [cl:clr; v:nat | v <= c] rbtree (a, cl, bh, v) =
  case+ t of
  | cons (
      !p_c, !p_tl, !p_x, !p_tr
    ) => let
      val sgn = compare<a> (x0, !p_x, cmp)
    in
      if sgn < 0 then let
        val [cl,v:int] tl = ins (!p_tl, x0)
        val () = !p_tl := tl
      in
        if !p_c = B then
          insfix_l (view@(!p_c), view@(!p_tl), view@(!p_x), view@(!p_tr) | t, p_tl)
        else let
          val () = !p_c := R in fold@ {a}{..}{..}{cl} (t); t
        end // end of [if]
      end else if sgn > 0 then let
        val [cr,v:int] tr = ins (!p_tr, x0)
        val () = !p_tr := tr
      in
        if !p_c = B then
          insfix_r (view@(!p_c), view@(!p_tl), view@(!p_x), view@(!p_tr) | t, p_tr)
        else let
          val () = !p_c := R in fold@ {a}{..}{..}{cr} (t); t
        end // end of [if]
      end else (fold@ {a}{..}{..}{0} (t); t) // end of [if]
    end // end of [cons]
  | ~nil () => cons {..}{..}{..}{0} (R, nil, x0, nil)
// end of [ins]
val t = ins (t, x0)
//
in
//
case+ t of cons (!p_c as R, _, _, _) => (!p_c := B; fold@ (t); t) | _ =>> t
//
end // end of [rbtree_insert]
]]></programlisting></informalexample>


</para>

<para>
I literally implemented the above <code>rbtree_insert</code> by making a copy
of the previous implementation of <code>rbtree_insert</code> for functional
red-black trees and then properly modifying it to make it pass
typechecking. Although this process of copying-and-modifying is difficult
to be described formally, it is fairly straightforward to follow in
practice as it is almost entirely guided by the error messages received
during typechecking.

</para>

<para>
Please find the entire code in this section plus some additional
code for testing <ulink url="http://www.ats-lang.org/DOCUMENT/INTPROGINATS/CODE/CHAPTER_DATAVTYPES/rbtree.dats">on-line</ulink>.
A challenging as well as rewarding exercise is for the reader to implement
an operation to delete an element from a given linear red-black tree.

</para>

</sect1><!--sect1/id=transition_from_datatypes_to_dataviewtypes-->

</chapter><!--id="dataviewtypes"-->

<!-- ****** ****** -->
<!-- end of [main.atxt] -->


