%{
//
dynload "libatsdoc/dynloadall.dats"
#include "utils/atsdoc/DOCUMENT/TUTORIALATS/tutorialatxt.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from chap_termetric.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter id="termetric">
#title("Metrics for Termination Verification")

#para("\

ATS provides a simple means for the programmer to verify the termination of
recursively defined functions by supplying proper termination metrics.
This is an indispensable feature for supporting the paradigm of programming
with theorem-proving as proof functions, namely, functions representing
proofs, must be proven to be terminating.

")

#para("\

A termination metric is a tuple (M#sub("1"), ..., M#sub("n")) of natural
numbers, where n >= 0. We use the standard well-founded lexicographical
ordering on natural numbers to order such tuples.

")

#simplesect("\
#title("Primitive Recursion")

#para("\

The kind of recursion in the following implementation of the factorial
function is primitive recursion:

#atscode_extract("
fun fact {n:nat} .<n>.
  (n: int n): int = if n > 0 then n * fact (n-1) else 1
// end of [fact]
")

The special syntax #code(".&lt;n&gt;.") indicates that the metric supplied
for verifying the termination of the defined function is a singleton tuple
#code("(n)"). In the definition of #code("fact"), the metric for the
recursive call to #code("fact") is #code("(n-1)"), which is strictly less
than the original metric #code("(n)"). Therefore, the defined function
#code("fact") is terminating.

")#comment("para")

")#comment("simplesect")

#simplesect("\
#title("General Recursion")
#para("\

We implement as follows a function #code("gcd") that computes the greatest
common divisor of two given positive integers:

#atscode_extract("\
//
// computing the greatest common divisors of two positive ints
//
fun gcd
  {m,n:int | m > 0; n > 0} .<m+n>.
  (m: int m, n: int n): [r:nat | 1 <= r; r <= min(m, n)] int r =
  if m > n then gcd (m - n, n)
  else if m < n then gcd (m, n - m)
  else m
// end of [gcd]
")

The syntax #code(".&lt;m+n&gt;.") indicates that the termination metric
#code("(m+n)") is supplied to verify that the defined function #code("gcd")
is terminating. In the definition of #code("gcd"), the termination metric
for the first recursive call to #code("gcd") is #code("(m-n)+n=m"), which
is strictly less than the original termination metri #code("m+n") (as
#code("n") is positive); the termination metric for the second recursive
call to #code("gcd") is #code("m+(n-m)=n"), which is also strictly less
than the original termination metric #code("m+n") (as #code("m") is
positive).  Thus, #code("gcd") is a terminating function.

")#comment("para")

#para("

As another example, we implement as follows the Ackermann's function, which
is famous for being recursive but not primitive recursive:

#atscode_extract("\
//
// [ack] implements the Ackermann's function
//
fun ack {m,n:nat} .<m, n>.
  (m: int m, n: int n): Nat =
  if m > 0 then
    if n > 0 then ack (m-1, ack (m, n-1)) else ack (m-1, 1)
  else n+1 // end of [if]
// end of [ack]
")

The syntax #code(".&lt;m, n&gt;.") indicates that the termination metric is
a pair of natural numbers: #code("(m, n)"). Note that the standard
lexicographical ordering on natural numbers is employed to compare such
metrics.  To verify that #code("ack") is terminating, we need to solve the
following constraints:

#itemizedlist{
#LI("#para("\
#code("(m-1, k)") is less than #code("(m, n)") under the assumption
#code("m > 0"), where #code("k") can be any natural number.
")"),

#LI("#para("\
#code("(m, n-1)") is less than #code("(m, n)") under the assumption
#code("m > 0") and #code("n > 0").
")"),

#LI("#para("\
#code("(m-1, 1)") is less than #code("(m, n)") under the assumption
#code("m > 0").
")")
}#comment("itemizedlist")

As all of these constraints can be readily solved, we conclude that
#code("ack") is a terminating funciton.

")#comment("para")

")#comment("simplesect")


#simplesect("\
#title("Mutual Recursion")

#para("\
When mutually recursive functions are to be verified, the termination
metrics for these functions, which are tuples of natural numbers, must be
of the same tuple length. We given a simple example as follows:

#atscode_extract("\
fun isEvn
  {n:nat} .<2*n+2>. (n: int n): bool =
  if n > 0 then ~(isOdd n) else true // end of [if]
// end of [isEvn]

and isOdd
  {n:nat} .<2*n+1>. (n: int n): bool =
  if n > 0 then isEvn (n-1) else false // end of [if]
// end of [isOdd]
")

Clearly, we can also verify the termination of these two functions by using
the metrics #code(".&lt;n, 1&gt;.") and #code(".&lt;n, 0&gt;.") for
#code("isEvn") and #code("isOdd"), respectively.

")#comment("para")

")#comment("simplesect")

#simplesect("\
#title("Termination Checking at Run-time")

#para("\
Suppose that #code("foo") and #code("bar") are declared as follows:

#atscode("\
fun foo ():<> void and bar ():<> void
")

Moreover, suppose that the following implementation of #code("foo")
is given in a file named #filename("foo.dats"):

#atscode("\
implement foo () = $Bar.bar ()
")

while the following implementation of #code("bar") is given in another file
named #filename("bar.dats") that is different from #filename("foo.dats"):

#atscode("\
implement bar () = $Foo.foo ()
")

Clearly, neither #code("foo") nor #code("bar") is terminating. In practice,
it is difficult to resolve this issue of calling cycles among functions by
solely relying on termination metrics. Instead, #code("atscc") can generate
run-time code for detecting calling cycles among functions if the flag
#emph("-D_ATS_PROOFCHECK") is present. For instance, if
#code("foo.dats") and #code("bar.dats") are compiled as follows:

<informalexample><programlisting>
#command("atscc") -D_ATS_PROOFCHECK foo.dats and bar.dats
</programlisting></informalexample>

then a run-time error is to be reported to indicate a calling cycle when
either #code("foo.dats") or #code("bar.dats") is loaded dynamically.
")#comment("para")

")#comment("simplesect")

</chapter><!--"termetric"-->

#comment(" ****** ****** ")

#comment(" end of [chap_termetric.atxt] ")

%{
implement main () = {
//
  val filr =
    $STDIO.fopen_ref_exn ("CODE/chap_termetric.dats", file_mode_w)
  val () = fprint_theCodeLst (filr)
  val () = $STDIO.fclose_exn (filr)
//
  val () = fprint_filsub (stdout_ref, "chap_termetric_atxt.txt")
//
}
%}

